{
  "schema_version": "1.0.0",
  "elements": [
    {
      "description": "",
      "summary": "",
      "path": "ui-helpers/cosmoz-clear-button.js",
      "properties": [
        {
          "name": "__dataEnabled",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1107,
              "column": 6
            },
            "end": {
              "line": 1107,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1109,
              "column": 6
            },
            "end": {
              "line": 1109,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1111,
              "column": 6
            },
            "end": {
              "line": 1111,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1113,
              "column": 6
            },
            "end": {
              "line": 1113,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1115,
              "column": 6
            },
            "end": {
              "line": 1115,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1117,
              "column": 6
            },
            "end": {
              "line": 1117,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1119,
              "column": 6
            },
            "end": {
              "line": 1119,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1121,
              "column": 6
            },
            "end": {
              "line": 1121,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1123,
              "column": 6
            },
            "end": {
              "line": 1123,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1125,
              "column": 6
            },
            "end": {
              "line": 1125,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "(!Object | null)",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1127,
              "column": 6
            },
            "end": {
              "line": 1127,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1129,
              "column": 6
            },
            "end": {
              "line": 1129,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1131,
              "column": 6
            },
            "end": {
              "line": 1131,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1133,
              "column": 6
            },
            "end": {
              "line": 1133,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1135,
              "column": 6
            },
            "end": {
              "line": 1135,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1137,
              "column": 6
            },
            "end": {
              "line": 1137,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1139,
              "column": 6
            },
            "end": {
              "line": 1139,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1141,
              "column": 6
            },
            "end": {
              "line": 1141,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1143,
              "column": 6
            },
            "end": {
              "line": 1143,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "PROPERTY_EFFECT_TYPES",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1146,
              "column": 4
            },
            "end": {
              "line": 1148,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 508,
              "column": 6
            },
            "end": {
              "line": 508,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 510,
              "column": 6
            },
            "end": {
              "line": 510,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 512,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 514,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 516,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 518,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "light",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "visible",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2465,
              "column": 4
            },
            "end": {
              "line": 2490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 462,
              "column": 4
            },
            "end": {
              "line": 467,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 491,
              "column": 4
            },
            "end": {
              "line": 493,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 143,
              "column": 5
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 627,
              "column": 4
            },
            "end": {
              "line": 633,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 274,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 372,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if changedProps is truthy"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            },
            {
              "name": "namespace",
              "type": "?string=",
              "description": "Attribute namespace."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 478,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 494,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 518,
              "column": 4
            },
            "end": {
              "line": 525,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 540,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1178,
              "column": 4
            },
            "end": {
              "line": 1182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 314,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1217,
              "column": 4
            },
            "end": {
              "line": 1225,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1236,
              "column": 4
            },
            "end": {
              "line": 1242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1255,
              "column": 4
            },
            "end": {
              "line": 1258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1270,
              "column": 4
            },
            "end": {
              "line": 1272,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1284,
              "column": 4
            },
            "end": {
              "line": 1286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to\nattribute\" property effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1298,
              "column": 4
            },
            "end": {
              "line": 1300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1312,
              "column": 4
            },
            "end": {
              "line": 1314,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1347,
              "column": 4
            },
            "end": {
              "line": 1379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(number | string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1403,
              "column": 4
            },
            "end": {
              "line": 1411,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1519,
              "column": 4
            },
            "end": {
              "line": 1524,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1547,
              "column": 4
            },
            "end": {
              "line": 1558,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1572,
              "column": 4
            },
            "end": {
              "line": 1585,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 654,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1616,
              "column": 4
            },
            "end": {
              "line": 1627,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1716,
              "column": 4
            },
            "end": {
              "line": 1726,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1738,
              "column": 4
            },
            "end": {
              "line": 1743,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1756,
              "column": 4
            },
            "end": {
              "line": 1761,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n        object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1,\n        object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1801,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1823,
              "column": 4
            },
            "end": {
              "line": 1825,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1849,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1876,
              "column": 4
            },
            "end": {
              "line": 1885,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1901,
              "column": 4
            },
            "end": {
              "line": 1910,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1930,
              "column": 4
            },
            "end": {
              "line": 1967,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number=",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1983,
              "column": 4
            },
            "end": {
              "line": 1992,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2009,
              "column": 4
            },
            "end": {
              "line": 2017,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2033,
              "column": 4
            },
            "end": {
              "line": 2050,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2064,
              "column": 4
            },
            "end": {
              "line": 2071,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2087,
              "column": 4
            },
            "end": {
              "line": 2097,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method\n    to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2111,
              "column": 4
            },
            "end": {
              "line": 2117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2129,
              "column": 4
            },
            "end": {
              "line": 2137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2150,
              "column": 4
            },
            "end": {
              "line": 2163,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2178,
              "column": 4
            },
            "end": {
              "line": 2184,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_marshalArgs",
          "description": "Gather the argument values for a method specified in the provided array\nof argument metadata.\n\nThe `path` and `value` arguments are used to fill in wildcard descriptor\nwhen the method is being called as a result of a path notification.",
          "privacy": "private",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2199,
              "column": 4
            },
            "end": {
              "line": 2220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "!Array.<!MethodArg>",
              "description": "Array of argument metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path name that triggered the method effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            }
          ],
          "return": {
            "type": "Array.<*>",
            "desc": "Array of argument values"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2399,
              "column": 4
            },
            "end": {
              "line": 2422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2502,
              "column": 4
            },
            "end": {
              "line": 2523,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 614,
              "column": 4
            },
            "end": {
              "line": 619,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 222,
              "column": 3
            },
            "end": {
              "line": 226,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 669,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 713,
              "column": 4
            },
            "end": {
              "line": 717,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 735,
              "column": 4
            },
            "end": {
              "line": 740,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyEffects` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 754,
              "column": 4
            },
            "end": {
              "line": 757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2541,
              "column": 4
            },
            "end": {
              "line": 2555,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2636,
              "column": 4
            },
            "end": {
              "line": 2646,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2575,
              "column": 4
            },
            "end": {
              "line": 2621,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 399,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 374,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "!Object",
              "description": "."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 187,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2260,
              "column": 4
            },
            "end": {
              "line": 2262,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2274,
              "column": 4
            },
            "end": {
              "line": 2276,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2291,
              "column": 4
            },
            "end": {
              "line": 2293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2303,
              "column": 4
            },
            "end": {
              "line": 2305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2323,
              "column": 4
            },
            "end": {
              "line": 2325,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2335,
              "column": 4
            },
            "end": {
              "line": 2337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2353,
              "column": 4
            },
            "end": {
              "line": 2355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2369,
              "column": 4
            },
            "end": {
              "line": 2371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Overrides `PropertyEffects` to warn on use of undeclared properties in\ntemplate.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 784,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n\nThe default implementation uses a regular expression for best\nperformance. However, the regular expression uses a white-list of\nallowed characters in a data-binding, which causes problems for\ndata-bindings that do use characters not in this white-list.\n\nInstead of updating the white-list with all allowed characters,\nthere is a StrictBindingParser (see lib/mixins/strict-binding-parser)\nthat uses a state machine instead. This state machine is able to handle\nall characters. However, it is slightly less performant, therefore we\nextracted it into a separate optional mixin.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2692,
              "column": 4
            },
            "end": {
              "line": 2757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2773,
              "column": 4
            },
            "end": {
              "line": 2790,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "!Polymer_PropertyEffects",
              "description": "Element that should be used as\n    scope for binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 132,
              "column": 3
            },
            "end": {
              "line": 141,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_prepareTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 396,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 577,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 588,
              "column": 4
            },
            "end": {
              "line": 599,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "CosmozClearButton",
      "attributes": [
        {
          "name": "light",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "visible",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-clear-button"
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column.js",
      "properties": [
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 3
            },
            "end": {
              "line": 43,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"55px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"55px\""
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-header-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "methods": [
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 1
            },
            "end": {
              "line": 62,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 1
            },
            "end": {
              "line": 54,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter",
              "defaultValue": "this.filter"
            }
          ]
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 1
            },
            "end": {
              "line": 58,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 63,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumn",
      "attributes": [
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 3
            },
            "end": {
              "line": 43,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 48,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column",
      "mixins": [
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-header-row.js",
      "properties": [
        {
          "name": "_elementType",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 1
            },
            "end": {
              "line": 41,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_slotName",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 43,
              "column": 1
            },
            "end": {
              "line": 45,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_groupOnColumnChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        }
      ],
      "methods": [
        {
          "name": "trackColumns",
          "description": "Adds an observer to render the cells when the columns are changed.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 44,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "stopTrackingColumns",
          "description": "Stops reacting to column changes.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "renderCells",
          "description": "Renders all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 75,
              "column": 1
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "destroyCells",
          "description": "Destroys all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 85,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardChange",
          "description": "Forwards a property change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "the property"
            },
            {
              "name": "value",
              "type": "any",
              "description": "the new value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardPathChange",
          "description": "Forwards a path change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord",
              "type": "Object",
              "description": "the change record"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forEachElement",
          "description": "Runs a callback on each element.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "OmnitableRepeaterMixin~forEachElementCallback",
              "description": "the callback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_getTemplateInstance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 1
            },
            "end": {
              "line": 57,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_configureElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 67,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "column"
            },
            {
              "name": "instance"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_columnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  path,\n  base,\n  value\n}"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_renderSplices",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 193,
              "column": 1
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "splices"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_addElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 204,
              "column": 1
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "count"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_removeElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 232,
              "column": 1
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "removedColumns"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "previousColumn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_forwardNotifyPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 260,
              "column": 1
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "flush",
              "defaultValue": "false"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 11,
          "column": 0
        },
        "end": {
          "line": 68,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableHeaderRow",
      "attributes": [
        {
          "name": "columns",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "group-on-column",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-header-row",
      "mixins": [
        "Cosmoz.OmnitableRepeaterMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-item-row.js",
      "properties": [
        {
          "name": "_elementType",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 1
            },
            "end": {
              "line": 72,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_slotName",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 1
            },
            "end": {
              "line": 76,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_groupOnColumnChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "item",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "expanded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 3
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_expandedChanged\"",
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trackColumns",
          "description": "Adds an observer to render the cells when the columns are changed.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 44,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "stopTrackingColumns",
          "description": "Stops reacting to column changes.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "renderCells",
          "description": "Renders all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 75,
              "column": 1
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "destroyCells",
          "description": "Destroys all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 85,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardChange",
          "description": "Forwards a property change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "the property"
            },
            {
              "name": "value",
              "type": "any",
              "description": "the new value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardPathChange",
          "description": "Forwards a path change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord",
              "type": "Object",
              "description": "the change record"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forEachElement",
          "description": "Runs a callback on each element.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "OmnitableRepeaterMixin~forEachElementCallback",
              "description": "the callback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_getTemplateInstance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 1
            },
            "end": {
              "line": 93,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_configureElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 1
            },
            "end": {
              "line": 105,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "column"
            },
            {
              "name": "instance"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_columnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  path,\n  base,\n  value\n}"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_renderSplices",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 193,
              "column": 1
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "splices"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_addElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 204,
              "column": 1
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "count"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_removeElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 232,
              "column": 1
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "removedColumns"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "previousColumn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_forwardNotifyPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 260,
              "column": 1
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "flush",
              "defaultValue": "false"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_itemUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 107,
              "column": 1
            },
            "end": {
              "line": 112,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 1
            },
            "end": {
              "line": 116,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_expandedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 120,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expanded"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getCellTitle",
          "description": "Get cell title displayed when hovering on the cell.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 1
            },
            "end": {
              "line": 130,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column",
              "type": "object",
              "description": "Column data."
            },
            {
              "name": "item",
              "type": "object",
              "description": "Row item."
            }
          ],
          "return": {
            "type": "string",
            "desc": "Cell title."
          }
        },
        {
          "name": "_computeItemRowCellClasses",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 1
            },
            "end": {
              "line": 136,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 137,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableItemRow",
      "attributes": [
        {
          "name": "columns",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "group-on-column",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 50,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 52,
              "column": 3
            },
            "end": {
              "line": 55,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "expanded",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 57,
              "column": 3
            },
            "end": {
              "line": 60,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-item-row",
      "mixins": [
        "Cosmoz.OmnitableRepeaterMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-item-expand-line.js",
      "properties": [
        {
          "name": "__dataEnabled",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1107,
              "column": 6
            },
            "end": {
              "line": 1107,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1109,
              "column": 6
            },
            "end": {
              "line": 1109,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1111,
              "column": 6
            },
            "end": {
              "line": 1111,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1113,
              "column": 6
            },
            "end": {
              "line": 1113,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1115,
              "column": 6
            },
            "end": {
              "line": 1115,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1117,
              "column": 6
            },
            "end": {
              "line": 1117,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1119,
              "column": 6
            },
            "end": {
              "line": 1119,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1121,
              "column": 6
            },
            "end": {
              "line": 1121,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1123,
              "column": 6
            },
            "end": {
              "line": 1123,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1125,
              "column": 6
            },
            "end": {
              "line": 1125,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "(!Object | null)",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1127,
              "column": 6
            },
            "end": {
              "line": 1127,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1129,
              "column": 6
            },
            "end": {
              "line": 1129,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1131,
              "column": 6
            },
            "end": {
              "line": 1131,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1133,
              "column": 6
            },
            "end": {
              "line": 1133,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1135,
              "column": 6
            },
            "end": {
              "line": 1135,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1137,
              "column": 6
            },
            "end": {
              "line": 1137,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1139,
              "column": 6
            },
            "end": {
              "line": 1139,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1141,
              "column": 6
            },
            "end": {
              "line": 1141,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1143,
              "column": 6
            },
            "end": {
              "line": 1143,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "PROPERTY_EFFECT_TYPES",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1146,
              "column": 4
            },
            "end": {
              "line": 1148,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 508,
              "column": 6
            },
            "end": {
              "line": 508,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 510,
              "column": 6
            },
            "end": {
              "line": 510,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 512,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 514,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 516,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 518,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "column",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2465,
              "column": 4
            },
            "end": {
              "line": 2490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 462,
              "column": 4
            },
            "end": {
              "line": 467,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 491,
              "column": 4
            },
            "end": {
              "line": 493,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 143,
              "column": 5
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 627,
              "column": 4
            },
            "end": {
              "line": 633,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 274,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 372,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if changedProps is truthy"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            },
            {
              "name": "namespace",
              "type": "?string=",
              "description": "Attribute namespace."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 478,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 494,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 518,
              "column": 4
            },
            "end": {
              "line": 525,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 540,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1178,
              "column": 4
            },
            "end": {
              "line": 1182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 314,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1217,
              "column": 4
            },
            "end": {
              "line": 1225,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1236,
              "column": 4
            },
            "end": {
              "line": 1242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1255,
              "column": 4
            },
            "end": {
              "line": 1258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1270,
              "column": 4
            },
            "end": {
              "line": 1272,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1284,
              "column": 4
            },
            "end": {
              "line": 1286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to\nattribute\" property effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1298,
              "column": 4
            },
            "end": {
              "line": 1300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1312,
              "column": 4
            },
            "end": {
              "line": 1314,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1347,
              "column": 4
            },
            "end": {
              "line": 1379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(number | string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1403,
              "column": 4
            },
            "end": {
              "line": 1411,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1519,
              "column": 4
            },
            "end": {
              "line": 1524,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1547,
              "column": 4
            },
            "end": {
              "line": 1558,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1572,
              "column": 4
            },
            "end": {
              "line": 1585,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 654,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1616,
              "column": 4
            },
            "end": {
              "line": 1627,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1716,
              "column": 4
            },
            "end": {
              "line": 1726,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1738,
              "column": 4
            },
            "end": {
              "line": 1743,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1756,
              "column": 4
            },
            "end": {
              "line": 1761,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n        object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1,\n        object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1801,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1823,
              "column": 4
            },
            "end": {
              "line": 1825,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1849,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1876,
              "column": 4
            },
            "end": {
              "line": 1885,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1901,
              "column": 4
            },
            "end": {
              "line": 1910,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1930,
              "column": 4
            },
            "end": {
              "line": 1967,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number=",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1983,
              "column": 4
            },
            "end": {
              "line": 1992,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2009,
              "column": 4
            },
            "end": {
              "line": 2017,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2033,
              "column": 4
            },
            "end": {
              "line": 2050,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2064,
              "column": 4
            },
            "end": {
              "line": 2071,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2087,
              "column": 4
            },
            "end": {
              "line": 2097,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method\n    to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2111,
              "column": 4
            },
            "end": {
              "line": 2117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2129,
              "column": 4
            },
            "end": {
              "line": 2137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2150,
              "column": 4
            },
            "end": {
              "line": 2163,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2178,
              "column": 4
            },
            "end": {
              "line": 2184,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_marshalArgs",
          "description": "Gather the argument values for a method specified in the provided array\nof argument metadata.\n\nThe `path` and `value` arguments are used to fill in wildcard descriptor\nwhen the method is being called as a result of a path notification.",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2199,
              "column": 4
            },
            "end": {
              "line": 2220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "!Array.<!MethodArg>",
              "description": "Array of argument metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path name that triggered the method effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            }
          ],
          "return": {
            "type": "Array.<*>",
            "desc": "Array of argument values"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2399,
              "column": 4
            },
            "end": {
              "line": 2422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2502,
              "column": 4
            },
            "end": {
              "line": 2523,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 614,
              "column": 4
            },
            "end": {
              "line": 619,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 222,
              "column": 3
            },
            "end": {
              "line": 226,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 669,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 713,
              "column": 4
            },
            "end": {
              "line": 717,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 735,
              "column": 4
            },
            "end": {
              "line": 740,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "ElementMixin"
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyEffects` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 754,
              "column": 4
            },
            "end": {
              "line": 757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2541,
              "column": 4
            },
            "end": {
              "line": 2555,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2636,
              "column": 4
            },
            "end": {
              "line": 2646,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2575,
              "column": 4
            },
            "end": {
              "line": 2621,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 399,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 374,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "!Object",
              "description": "."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 187,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2260,
              "column": 4
            },
            "end": {
              "line": 2262,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2274,
              "column": 4
            },
            "end": {
              "line": 2276,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2291,
              "column": 4
            },
            "end": {
              "line": 2293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2303,
              "column": 4
            },
            "end": {
              "line": 2305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2323,
              "column": 4
            },
            "end": {
              "line": 2325,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2335,
              "column": 4
            },
            "end": {
              "line": 2337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2353,
              "column": 4
            },
            "end": {
              "line": 2355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2369,
              "column": 4
            },
            "end": {
              "line": 2371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Overrides `PropertyEffects` to warn on use of undeclared properties in\ntemplate.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 784,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n\nThe default implementation uses a regular expression for best\nperformance. However, the regular expression uses a white-list of\nallowed characters in a data-binding, which causes problems for\ndata-bindings that do use characters not in this white-list.\n\nInstead of updating the white-list with all allowed characters,\nthere is a StrictBindingParser (see lib/mixins/strict-binding-parser)\nthat uses a state machine instead. This state machine is able to handle\nall characters. However, it is slightly less performant, therefore we\nextracted it into a separate optional mixin.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2692,
              "column": 4
            },
            "end": {
              "line": 2757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2773,
              "column": 4
            },
            "end": {
              "line": 2790,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "!Polymer_PropertyEffects",
              "description": "Element that should be used as\n    scope for binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 132,
              "column": 3
            },
            "end": {
              "line": 141,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_prepareTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 396,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 577,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 588,
              "column": 4
            },
            "end": {
              "line": 599,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 6,
          "column": 0
        },
        "end": {
          "line": 52,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "OmnitableItemExpandLine",
      "attributes": [
        {
          "name": "column",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-item-expand-line"
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-item-expand.js",
      "properties": [
        {
          "name": "_elementType",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_slotName",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 1
            },
            "end": {
              "line": 83,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_groupOnColumnChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "item",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "expanded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_expandedChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 3
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trackColumns",
          "description": "Adds an observer to render the cells when the columns are changed.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 44,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "stopTrackingColumns",
          "description": "Stops reacting to column changes.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "renderCells",
          "description": "Renders all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 75,
              "column": 1
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "destroyCells",
          "description": "Destroys all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 85,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardChange",
          "description": "Forwards a property change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "the property"
            },
            {
              "name": "value",
              "type": "any",
              "description": "the new value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardPathChange",
          "description": "Forwards a path change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord",
              "type": "Object",
              "description": "the change record"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forEachElement",
          "description": "Runs a callback on each element.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "OmnitableRepeaterMixin~forEachElementCallback",
              "description": "the callback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_getTemplateInstance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 93,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_configureElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 98,
              "column": 1
            },
            "end": {
              "line": 101,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element"
            },
            {
              "name": "column"
            },
            {
              "name": "instance"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_columnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  path,\n  base,\n  value\n}"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_renderSplices",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 193,
              "column": 1
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "splices"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_addElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 204,
              "column": 1
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "count"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_removeElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 232,
              "column": 1
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "removedColumns"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "previousColumn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_forwardNotifyPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 260,
              "column": 1
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "flush",
              "defaultValue": "false"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_updateSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 103,
              "column": 1
            },
            "end": {
              "line": 112,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnsCount"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_itemUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 114,
              "column": 1
            },
            "end": {
              "line": 116,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 120,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_expandedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 1
            },
            "end": {
              "line": 132,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expanded"
            },
            {
              "name": "prevValue"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 133,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableItemExpand",
      "attributes": [
        {
          "name": "columns",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "group-on-column",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 47,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 51,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "expanded",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 3
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-item-expand",
      "mixins": [
        "Cosmoz.OmnitableRepeaterMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-group-row.js",
      "properties": [
        {
          "name": "_elementType",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_slotName",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_groupOnColumnChanged\"",
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "column",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_columnChanged\"",
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "item",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 3
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "selected",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 3
            },
            "end": {
              "line": 39,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_selectedChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "folded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 3
            },
            "end": {
              "line": 44,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_foldedChanged\"",
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trackColumns",
          "description": "Adds an observer to render the cells when the columns are changed.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 44,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "stopTrackingColumns",
          "description": "Stops reacting to column changes.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "renderCells",
          "description": "Renders all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 75,
              "column": 1
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "destroyCells",
          "description": "Destroys all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 85,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardChange",
          "description": "Forwards a property change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "the property"
            },
            {
              "name": "value",
              "type": "any",
              "description": "the new value"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forwardPathChange",
          "description": "Forwards a path change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord",
              "type": "Object",
              "description": "the change record"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "forEachElement",
          "description": "Runs a callback on each element.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "OmnitableRepeaterMixin~forEachElementCallback",
              "description": "the callback"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_getTemplateInstance",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 1
            },
            "end": {
              "line": 86,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ]
        },
        {
          "name": "_configureElement",
          "description": "Configure a newly created repeated element",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 165,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "the root cell element"
            },
            {
              "name": "column",
              "type": "OmnitableColumnMixin",
              "description": "the column"
            },
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "the template instance"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_columnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  path,\n  base,\n  value\n}"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_renderSplices",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 193,
              "column": 1
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "splices"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_addElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 204,
              "column": 1
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "count"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_removeElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 232,
              "column": 1
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "removedColumns"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "previousColumn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_forwardNotifyPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 260,
              "column": 1
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "flush",
              "defaultValue": "false"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "_columnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 76,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newColumn"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_itemUpdated",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 90,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_selectedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 92,
              "column": 1
            },
            "end": {
              "line": 94,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "selected"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_foldedChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 1
            },
            "end": {
              "line": 98,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "folded"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 12,
          "column": 0
        },
        "end": {
          "line": 99,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableGroupRow",
      "attributes": [
        {
          "name": "columns",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "group-on-column",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-repeater-mixin.js",
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableRepeaterMixin"
        },
        {
          "name": "column",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "item",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 32,
              "column": 3
            },
            "end": {
              "line": 34,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "selected",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 36,
              "column": 3
            },
            "end": {
              "line": 39,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "folded",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 41,
              "column": 3
            },
            "end": {
              "line": 44,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-group-row",
      "mixins": [
        "Cosmoz.OmnitableRepeaterMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-item.js",
      "properties": [
        {
          "name": "__dataEnabled",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 161,
              "column": 6
            },
            "end": {
              "line": 161,
              "column": 24
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "__dataClientsReady",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1107,
              "column": 6
            },
            "end": {
              "line": 1107,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPendingClients",
          "type": "Array",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1109,
              "column": 6
            },
            "end": {
              "line": 1109,
              "column": 32
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataToNotify",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1111,
              "column": 6
            },
            "end": {
              "line": 1111,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataLinkedPaths",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1113,
              "column": 6
            },
            "end": {
              "line": 1113,
              "column": 29
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHasPaths",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1115,
              "column": 6
            },
            "end": {
              "line": 1115,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataCompoundStorage",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1117,
              "column": 6
            },
            "end": {
              "line": 1117,
              "column": 33
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataHost",
          "type": "Polymer_PropertyEffects",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1119,
              "column": 6
            },
            "end": {
              "line": 1119,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataTemp",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1121,
              "column": 6
            },
            "end": {
              "line": 1121,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataClientsInitialized",
          "type": "boolean",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1123,
              "column": 6
            },
            "end": {
              "line": 1123,
              "column": 36
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__data",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1125,
              "column": 6
            },
            "end": {
              "line": 1125,
              "column": 18
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataPending",
          "type": "(!Object | null)",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1127,
              "column": 6
            },
            "end": {
              "line": 1127,
              "column": 25
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__dataOld",
          "type": "!Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1129,
              "column": 6
            },
            "end": {
              "line": 1129,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__computeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1131,
              "column": 6
            },
            "end": {
              "line": 1131,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__reflectEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1133,
              "column": 6
            },
            "end": {
              "line": 1133,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__notifyEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1135,
              "column": 6
            },
            "end": {
              "line": 1135,
              "column": 27
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__propagateEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1137,
              "column": 6
            },
            "end": {
              "line": 1137,
              "column": 30
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__observeEffects",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1139,
              "column": 6
            },
            "end": {
              "line": 1139,
              "column": 28
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__readOnly",
          "type": "Object",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1141,
              "column": 6
            },
            "end": {
              "line": 1141,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__templateInfo",
          "type": "!TemplateInfo",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1143,
              "column": 6
            },
            "end": {
              "line": 1143,
              "column": 26
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "PROPERTY_EFFECT_TYPES",
          "type": "?",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1146,
              "column": 4
            },
            "end": {
              "line": 1148,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_template",
          "type": "HTMLTemplateElement",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 508,
              "column": 6
            },
            "end": {
              "line": 508,
              "column": 21
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_importPath",
          "type": "string",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 510,
              "column": 6
            },
            "end": {
              "line": 510,
              "column": 23
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "rootPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 512,
              "column": 6
            },
            "end": {
              "line": 512,
              "column": 20
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "importPath",
          "type": "string",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 514,
              "column": 6
            },
            "end": {
              "line": 514,
              "column": 22
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "root",
          "type": "(StampedTemplate | HTMLElement | ShadowRoot)",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 516,
              "column": 6
            },
            "end": {
              "line": 516,
              "column": 16
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "$",
          "type": "!Object.<string, !Element>",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 518,
              "column": 6
            },
            "end": {
              "line": 518,
              "column": 13
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": false
            }
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "label",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 3
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_labelChanged\"",
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "_stampTemplate",
          "description": "Stamps the provided template and performs instance-time setup for\nPolymer template features, including data bindings, declarative event\nlisteners, and the `this.$` map of `id`'s to nodes.  A document fragment\nis returned containing the stamped DOM, ready for insertion into the\nDOM.\n\nThis method may be called more than once; however note that due to\n`shadycss` polyfill limitations, only styles from templates prepared\nusing `ShadyCSS.prepareTemplate` will be correctly polyfilled (scoped\nto the shadow root and support CSS custom properties), and note that\n`ShadyCSS.prepareTemplate` may only be called once per element. As such,\nany styles required by in runtime-stamped templates must be included\nin the main element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2465,
              "column": 4
            },
            "end": {
              "line": 2490,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to stamp"
            }
          ],
          "return": {
            "type": "!StampedTemplate",
            "desc": "Cloned template content"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addMethodEventListenerToNode",
          "description": "Adds an event listener by method name for the event provided.\n\nThis method generates a handler function that looks up the method\nname at handling time.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 462,
              "column": 4
            },
            "end": {
              "line": 467,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add listener on"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "methodName",
              "type": "string",
              "description": "Name of method"
            },
            {
              "name": "context",
              "type": "*=",
              "description": "Context the method will be called on (defaults\n  to `node`)"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "Generated handler function"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_addEventListenerToNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 478,
              "column": 4
            },
            "end": {
              "line": 480,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to add event listener to"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to add"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_removeEventListenerFromNode",
          "description": "Override point for adding custom or simulated event handling.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 491,
              "column": 4
            },
            "end": {
              "line": 493,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!EventTarget",
              "description": "Node to remove event listener from"
            },
            {
              "name": "eventName",
              "type": "string",
              "description": "Name of event"
            },
            {
              "name": "handler",
              "type": "function (!Event): void",
              "description": "Listener function to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_createPropertyAccessor",
          "description": "Creates a setter/getter pair for the named property with its own\nlocal storage.  The getter returns the value in the local storage,\nand the setter calls `_setProperty`, which updates the local storage\nfor the property and enqueues a `_propertiesChanged` callback.\n\nThis method may be called on a prototype or an instance.  Calling\nthis method may overwrite a property value that already exists on\nthe prototype/instance by creating the accessor.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 107,
              "column": 4
            },
            "end": {
              "line": 116,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created; the\n  protected `_setProperty` function must be used to set the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_addPropertyToAttributeMap",
          "description": "Adds the given `property` to a map matching attribute names\nto property names, using `attributeNameForProperty`. This map is\nused when deserializing attribute values to properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 126,
              "column": 4
            },
            "end": {
              "line": 134,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_definePropertyAccessor",
          "description": "Defines a property accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 143,
              "column": 5
            },
            "end": {
              "line": 156,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "readOnly",
              "type": "boolean=",
              "description": "When true, no setter is created"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "ready",
          "description": "Stamps the element template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 627,
              "column": 4
            },
            "end": {
              "line": 633,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeProperties",
          "description": "Overrides the default `PropertyAccessors` to ensure class\nmetaprogramming related to property accessors and effects has\ncompleted (calls `finalize`).\n\nIt also initializes any property defaults provided via `value` in\n`properties` metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 533,
              "column": 4
            },
            "end": {
              "line": 565,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_initializeInstanceProperties",
          "description": "Called at ready time with bag of instance properties that overwrote\naccessors when the element upgraded.\n\nThe default implementation sets these properties back into the\nsetter at ready time.  This method is provided as an override\npoint for customizing or providing more efficient initialization.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 229,
              "column": 4
            },
            "end": {
              "line": 231,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of property values that were overwritten\n  when creating property accessors."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setProperty",
          "description": "Updates the local storage for a property (via `_setPendingProperty`)\nand enqueues a `_proeprtiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 243,
              "column": 4
            },
            "end": {
              "line": 247,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_getProperty",
          "description": "Returns the value for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 256,
              "column": 4
            },
            "end": {
              "line": 258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value for the given property"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_setPendingProperty",
          "description": "Updates the local storage for a property, records the previous value,\nand adds it to the set of \"pending changes\" that will be passed to the\n`_propertiesChanged` callback.  This method does not enqueue the\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 274,
              "column": 4
            },
            "end": {
              "line": 290,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of the property"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "ext",
              "type": "boolean=",
              "description": "Not used here; affordance for closure"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property changed"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_invalidateProperties",
          "description": "Marks the properties as invalid, and enqueues an async\n`_propertiesChanged` callback.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 301,
              "column": 4
            },
            "end": {
              "line": 311,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_enableProperties",
          "description": "Call to enable property accessor processing. Before this method is\ncalled accessor values will be set but side effects are\nqueued. When called, any pending side effects occur immediately.\nFor elements, generally `connectedCallback` is a normal spot to do so.\nIt is safe to call this method multiple times as it only turns on\nproperty accessors once.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 325,
              "column": 4
            },
            "end": {
              "line": 334,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_flushProperties",
          "description": "Calls the `_propertiesChanged` callback with the current set of\npending changes (and old values recorded when pending changes were\nset), and resets the pending set of changes. Generally, this method\nshould not be called in user code.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 346,
              "column": 4
            },
            "end": {
              "line": 355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertiesChange",
          "description": "Called in `_flushProperties` to determine if `_propertiesChanged`\nshould be called. The default implementation returns true if\nproperties are pending. Override to customize when\n`_propertiesChanged` is called.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 370,
              "column": 4
            },
            "end": {
              "line": 372,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "true if changedProps is truthy"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertiesChanged",
          "description": "Callback called when any properties with accessors created via\n`_createPropertyAccessor` have been set.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 387,
              "column": 4
            },
            "end": {
              "line": 388,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currentProps",
              "type": "!Object",
              "description": "Bag of all current accessor values"
            },
            {
              "name": "changedProps",
              "type": "?Object",
              "description": "Bag of properties changed since the last\n  call to `_propertiesChanged`"
            },
            {
              "name": "oldProps",
              "type": "?Object",
              "description": "Bag of previous values for each property\n  in `changedProps`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_shouldPropertyChange",
          "description": "Method called to determine whether a property value should be\nconsidered as a change and cause the `_propertiesChanged` callback\nto be enqueued.\n\nThe default implementation returns `true` if a strict equality\ncheck fails. The method always returns false for `NaN`.\n\nOverride this method to e.g. provide stricter checking for\nObjects/Arrays when using immutable patterns.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 409,
              "column": 4
            },
            "end": {
              "line": 416,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "value",
              "type": "*",
              "description": "New property value"
            },
            {
              "name": "old",
              "type": "*",
              "description": "Previous property value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Whether the property should be considered a change\n  and enqueue a `_proeprtiesChanged` callback"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "attributeChangedCallback",
          "description": "Implements native Custom Elements `attributeChangedCallback` to\nset an attribute value to a property via `_attributeToProperty`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 430,
              "column": 4
            },
            "end": {
              "line": 437,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of attribute that changed"
            },
            {
              "name": "old",
              "type": "?string",
              "description": "Old attribute value"
            },
            {
              "name": "value",
              "type": "?string",
              "description": "New attribute value"
            },
            {
              "name": "namespace",
              "type": "?string=",
              "description": "Attribute namespace."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_attributeToProperty",
          "description": "Deserializes an attribute to its associated property.\n\nThis method calls the `_deserializeValue` method to convert the string to\na typed value.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 452,
              "column": 4
            },
            "end": {
              "line": 459,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to deserialize."
            },
            {
              "name": "value",
              "type": "?string",
              "description": "of the attribute."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "type to deserialize to, defaults to the value\nreturned from `typeForProperty`"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_propertyToAttribute",
          "description": "Serializes a property to its associated attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 472,
              "column": 4
            },
            "end": {
              "line": 478,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name to reflect."
            },
            {
              "name": "attribute",
              "type": "string=",
              "description": "Attribute name to reflect to."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Property value to refect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_valueToNodeAttribute",
          "description": "Sets a typed value to an HTML attribute on a node.\n\nThis method calls the `_serializeValue` method to convert the typed\nvalue to a string.  If the `_serializeValue` method returns `undefined`,\nthe attribute will be removed (this is the default for boolean\ntype `false`).",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 494,
              "column": 4
            },
            "end": {
              "line": 504,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Element to set attribute to."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to serialize."
            },
            {
              "name": "attribute",
              "type": "string",
              "description": "Attribute name to serialize to."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_serializeValue",
          "description": "Converts a typed JavaScript value to a string.\n\nThis method is called when setting JS property values to\nHTML attributes.  Users may override this method to provide\nserialization for custom types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 518,
              "column": 4
            },
            "end": {
              "line": 525,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "*",
              "description": "Property value to serialize."
            }
          ],
          "return": {
            "type": "(string | undefined)",
            "desc": "String serialized from the provided\nproperty  value."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_deserializeValue",
          "description": "Converts a string to a typed JavaScript value.\n\nThis method is called when reading HTML attribute values to\nJS properties.  Users may override this method to provide\ndeserialization for custom `type`s. Types for `Boolean`, `String`,\nand `Number` convert attributes to the expected types.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 540,
              "column": 4
            },
            "end": {
              "line": 549,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "?string",
              "description": "Value to deserialize."
            },
            {
              "name": "type",
              "type": "*=",
              "description": "Type to deserialize the string to."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Typed value deserialized from the provided string."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "_initializeProtoProperties",
          "description": "Overrides `PropertyAccessors` implementation to provide a\nmore efficient implementation of initializing properties from\nthe prototype on the instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1178,
              "column": 4
            },
            "end": {
              "line": 1182,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Properties to initialize on the prototype"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_ensureAttribute",
          "description": "Ensures the element has the given attribute. If it does not,\nassigns the given value to the attribute.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 190,
              "column": 4
            },
            "end": {
              "line": 195,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attribute",
              "type": "string",
              "description": "Name of attribute to ensure is set."
            },
            {
              "name": "value",
              "type": "string",
              "description": "of the attribute."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_hasAccessor",
          "description": "Returns true if this library created an accessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 302,
              "column": 4
            },
            "end": {
              "line": 304,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if an accessor was created"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_isPropertyPending",
          "description": "Returns true if the specified property has a pending change.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 314,
              "column": 4
            },
            "end": {
              "line": 316,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "prop",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if property has a pending change"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "_addPropertyEffect",
          "description": "Equivalent to static `addPropertyEffect` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1217,
              "column": 4
            },
            "end": {
              "line": 1225,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removePropertyEffect",
          "description": "Removes the given property effect.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1236,
              "column": 4
            },
            "end": {
              "line": 1242,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property the effect was associated with"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object to remove"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasPropertyEffect",
          "description": "Returns whether the current prototype/instance has a property effect\nof a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1255,
              "column": 4
            },
            "end": {
              "line": 1258,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "type",
              "type": "string=",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReadOnlyEffect",
          "description": "Returns whether the current prototype/instance has a \"read only\"\naccessor for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1270,
              "column": 4
            },
            "end": {
              "line": 1272,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasNotifyEffect",
          "description": "Returns whether the current prototype/instance has a \"notify\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1284,
              "column": 4
            },
            "end": {
              "line": 1286,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasReflectEffect",
          "description": "Returns whether the current prototype/instance has a \"reflect to\nattribute\" property effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1298,
              "column": 4
            },
            "end": {
              "line": 1300,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_hasComputedEffect",
          "description": "Returns whether the current prototype/instance has a \"computed\"\nproperty effect for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1312,
              "column": 4
            },
            "end": {
              "line": 1314,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "True if the prototype/instance has an effect of this\n    type"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setPendingPropertyOrPath",
          "description": "Sets a pending property or path.  If the root property of the path in\nquestion had no accessor, the path is set, otherwise it is enqueued\nvia `_setPendingProperty`.\n\nThis function isolates relatively expensive functionality necessary\nfor the public API (`set`, `setProperties`, `notifyPath`, and property\nchange listeners via {{...}} bindings), such that it is only done\nwhen paths enter the system, and not at every propagation step.  It\nalso sets a `__dataHasPaths` flag on the instance which is used to\nfast-path slower path-matching code in the property effects host paths.\n\n`path` can be a path string or array of path parts as accepted by the\npublic API.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1347,
              "column": 4
            },
            "end": {
              "line": 1379,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(number | string)>)",
              "description": "Path to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set"
            },
            {
              "name": "shouldNotify",
              "type": "boolean=",
              "description": "Set to true if this change should\n cause a property notification event dispatch"
            },
            {
              "name": "isPathNotification",
              "type": "boolean=",
              "description": "If the path being set is a path\n  notification of an already changed value, as opposed to a request\n  to set and notify the change.  In the latter `false` case, a dirty\n  check is performed and then the value is set to the path before\n  enqueuing the pending property change."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "Returns true if the property/path was enqueued in\n  the pending changes bag."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_setUnmanagedPropertyToNode",
          "description": "Applies a value to a non-Polymer element/node's property.\n\nThe implementation makes a best-effort at binding interop:\nSome native element properties have side-effects when\nre-setting the same value (e.g. setting `<input>.value` resets the\ncursor position), so we do a dirty-check before setting the value.\nHowever, for better interop with non-Polymer custom elements that\naccept objects, we explicitly re-set object changes coming from the\nPolymer world (which may include deep object changes without the\ntop reference changing), erring on the side of providing more\ninformation.\n\nUsers may override this method to provide alternate approaches.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1403,
              "column": 4
            },
            "end": {
              "line": 1411,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "!Node",
              "description": "The node to set a property on"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "The property to set"
            },
            {
              "name": "value",
              "type": "*",
              "description": "The value to set"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_enqueueClient",
          "description": "Enqueues the given client on a list of pending clients, whose\npending property changes can later be flushed via a call to\n`_flushClients`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1519,
              "column": 4
            },
            "end": {
              "line": 1524,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "client",
              "type": "Object",
              "description": "PropertyEffects client to enqueue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_flushClients",
          "description": "Flushes any clients previously enqueued via `_enqueueClient`, causing\ntheir `_flushProperties` method to run.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1547,
              "column": 4
            },
            "end": {
              "line": 1558,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "__enableOrFlushClients",
          "description": "(c) the stamped dom enables.",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1572,
              "column": 4
            },
            "end": {
              "line": 1585,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_readyClients",
          "description": "Implements `PropertyEffects`'s `_readyClients` call. Attaches\nelement dom by calling `_attachDom` with the dom stamped from the\nelement's template via `_stampTemplate`. Note that this allows\nclient dom to be attached to the element prior to any observers\nrunning.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 645,
              "column": 4
            },
            "end": {
              "line": 654,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "setProperties",
          "description": "Sets a bag of property changes to this instance, and\nsynchronously processes all effects of the properties as a batch.\n\nProperty names must be simple properties, not paths.  Batched\npath propagation is not supported.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1616,
              "column": 4
            },
            "end": {
              "line": 1627,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of one or more key-value pairs whose key is\n  a property and value is the new value to set for that property."
            },
            {
              "name": "setReadOnly",
              "type": "boolean=",
              "description": "When true, any private values set in\n  `props` will be set. By default, `setProperties` will not set\n  `readOnly: true` root properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_propagatePropertyChanges",
          "description": "Called to propagate any property changes to stamped template nodes\nmanaged by this element.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1716,
              "column": 4
            },
            "end": {
              "line": 1726,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changedProps",
              "type": "Object",
              "description": "Bag of changed properties"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "linkPaths",
          "description": "Aliases one data path as another, such that path notifications from one\nare routed to the other.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1738,
              "column": 4
            },
            "end": {
              "line": 1743,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "to",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to link."
            },
            {
              "name": "from",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Source path to link."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unlinkPaths",
          "description": "Removes a data path alias previously established with `_linkPaths`.\n\nNote, the path to unlink should be the target (`to`) used when\nlinking the paths.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1756,
              "column": 4
            },
            "end": {
              "line": 1761,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Target path to unlink."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifySplices",
          "description": "Notify that an array has changed.\n\nExample:\n\n    this.items = [ {name: 'Jim'}, {name: 'Todd'}, {name: 'Bill'} ];\n    ...\n    this.items.splice(1, 1, {name: 'Sam'});\n    this.items.push({name: 'Bob'});\n    this.notifySplices('items', [\n      { index: 1, removed: [{name: 'Todd'}], addedCount: 1,\n        object: this.items, type: 'splice' },\n      { index: 3, removed: [], addedCount: 1,\n        object: this.items, type: 'splice'}\n    ]);",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1797,
              "column": 4
            },
            "end": {
              "line": 1801,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "splices",
              "type": "Array",
              "description": "Array of splice records indicating ordered\n  changes that occurred to the array. Each record should have the\n  following fields:\n   * index: index at which the change occurred\n   * removed: array of items that were removed from this index\n   * addedCount: number of new items added at this index\n   * object: a reference to the array in question\n   * type: the string literal 'splice'\n\n  Note that splice records _must_ be normalized such that they are\n  reported in index order (raw results from `Object.observe` are not\n  ordered and must be normalized/merged before notifying)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "get",
          "description": "Convenience method for reading a value from a path.\n\nNote, if any part in the path is undefined, this method returns\n`undefined` (this method does not throw when dereferencing undefined\npaths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1823,
              "column": 4
            },
            "end": {
              "line": 1825,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to read.  The path may be specified as a string (e.g. `foo.bar.baz`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `users.12.name` or `['users', 12, 'name']`)."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value at the path, or `undefined` if any part of the path\n  is undefined."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "set",
          "description": "Convenience method for setting a value to a path and notifying any\nelements bound to the same path.\n\nNote, if any part in the path except for the last is undefined,\nthis method does nothing (this method does not throw when\ndereferencing undefined paths).",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1849,
              "column": 4
            },
            "end": {
              "line": 1859,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to the value\n  to write.  The path may be specified as a string (e.g. `'foo.bar.baz'`)\n  or an array of path parts (e.g. `['foo.bar', 'baz']`).  Note that\n  bracketed expressions are not supported; string-based path parts\n  *must* be separated by dots.  Note that when dereferencing array\n  indices, the index may be used as a dotted part directly\n  (e.g. `'users.12.name'` or `['users', 12, 'name']`)."
            },
            {
              "name": "value",
              "type": "*",
              "description": "Value to set at the specified path."
            },
            {
              "name": "root",
              "type": "Object=",
              "description": "Root object from which the path is evaluated.\n  When specified, no notification will occur."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "push",
          "description": "Adds items onto the end of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1876,
              "column": 4
            },
            "end": {
              "line": 1885,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to push onto array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "pop",
          "description": "Removes an item from the end of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1901,
              "column": 4
            },
            "end": {
              "line": 1910,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "splice",
          "description": "Starting from the start index specified, removes 0 or more items\nfrom the array and inserts 0 or more new items in their place.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.splice`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1930,
              "column": 4
            },
            "end": {
              "line": 1967,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "start",
              "type": "number",
              "description": "Index from which to start removing/inserting."
            },
            {
              "name": "deleteCount",
              "type": "number=",
              "description": "Number of items to remove."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert into array."
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array of removed items."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "shift",
          "description": "Removes an item from the beginning of array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.pop`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 1983,
              "column": 4
            },
            "end": {
              "line": 1992,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            }
          ],
          "return": {
            "type": "*",
            "desc": "Item that was removed."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "unshift",
          "description": "Adds items onto the beginning of the array at the path specified.\n\nThe arguments after `path` and return value match that of\n`Array.prototype.push`.\n\nThis method notifies other paths to the same array that a\nsplice occurred to the array.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2009,
              "column": 4
            },
            "end": {
              "line": 2017,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "(string | !Array.<(string | number)>)",
              "description": "Path to array."
            },
            {
              "name": "items",
              "type": "...*",
              "rest": true,
              "description": "Items to insert info array"
            }
          ],
          "return": {
            "type": "number",
            "desc": "New length of the array."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "notifyPath",
          "description": "Notify that a path has changed.\n\nExample:\n\n    this.item.user.name = 'Bob';\n    this.notifyPath('item.user.name');",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2033,
              "column": 4
            },
            "end": {
              "line": 2050,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "path",
              "type": "string",
              "description": "Path that should be notified."
            },
            {
              "name": "value",
              "type": "*=",
              "description": "Value at the path (optional)."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReadOnlyProperty",
          "description": "Equivalent to static `createReadOnlyProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2064,
              "column": 4
            },
            "end": {
              "line": 2071,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createPropertyObserver",
          "description": "Equivalent to static `createPropertyObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2087,
              "column": 4
            },
            "end": {
              "line": 2097,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method\n    to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createMethodObserver",
          "description": "Equivalent to static `createMethodObserver` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2111,
              "column": 4
            },
            "end": {
              "line": 2117,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createNotifyingProperty",
          "description": "Equivalent to static `createNotifyingProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2129,
              "column": 4
            },
            "end": {
              "line": 2137,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createReflectedProperty",
          "description": "Equivalent to static `createReflectedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2150,
              "column": 4
            },
            "end": {
              "line": 2163,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_createComputedProperty",
          "description": "Equivalent to static `createComputedProperty` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2178,
              "column": 4
            },
            "end": {
              "line": 2184,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating\n  whether method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_marshalArgs",
          "description": "Gather the argument values for a method specified in the provided array\nof argument metadata.\n\nThe `path` and `value` arguments are used to fill in wildcard descriptor\nwhen the method is being called as a result of a path notification.",
          "privacy": "private",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2199,
              "column": 4
            },
            "end": {
              "line": 2220,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "args",
              "type": "!Array.<!MethodArg>",
              "description": "Array of argument metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path name that triggered the method effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            }
          ],
          "return": {
            "type": "Array.<*>",
            "desc": "Array of argument values"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_bindTemplate",
          "description": "Equivalent to static `bindTemplate` API but can be called on\nan instance to add effects at runtime.  See that method for\nfull API docs.\n\nThis method may be called on the prototype (for prototypical template\nbinding, to avoid creating accessors every instance) once per prototype,\nand will be called with `runtimeBinding: true` by `_stampTemplate` to\ncreate and link an instance of the template metadata associated with a\nparticular stamping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2399,
              "column": 4
            },
            "end": {
              "line": 2422,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            },
            {
              "name": "instanceBinding",
              "type": "boolean=",
              "description": "When false (default), performs\n  \"prototypical\" binding of the template and overwrites any previously\n  bound template for the class. When true (as passed from\n  `_stampTemplate`), the template info is instanced and linked into\n  the list of bound templates."
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object; for `runtimeBinding`,\n  this is an instance of the prototypical template info"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_removeBoundDom",
          "description": "Removes and unbinds the nodes previously contained in the provided\nDocumentFragment returned from `_stampTemplate`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2502,
              "column": 4
            },
            "end": {
              "line": 2523,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "!StampedTemplate",
              "description": "DocumentFragment previously returned\n  from `_stampTemplate` associated with the nodes to be removed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "connectedCallback",
          "description": "Provides a default implementation of the standard Custom Elements\n`connectedCallback`.\n\nThe default implementation enables the property effects system and\nflushes any pending properties, and updates shimmed CSS properties\nwhen using the ShadyCSS scoping/custom properties polyfill.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 614,
              "column": 4
            },
            "end": {
              "line": 619,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Called when the element is removed from a document",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 222,
              "column": 3
            },
            "end": {
              "line": 226,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_attachDom",
          "description": "Attaches an element's stamped dom to itself. By default,\nthis method creates a `shadowRoot` and adds the dom to it.\nHowever, this method may be overridden to allow an element\nto put its dom in another location.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 669,
              "column": 4
            },
            "end": {
              "line": 689,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dom",
              "type": "StampedTemplate",
              "description": "to attach to the element."
            }
          ],
          "return": {
            "type": "ShadowRoot",
            "desc": "node to which the dom has been attached."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "updateStyles",
          "description": "When using the ShadyCSS scoping and custom property shim, causes all\nshimmed styles in this element (and its subtree) to be updated\nbased on current custom property values.\n\nThe optional parameter overrides inline custom property styles with an\nobject of properties where the keys are CSS properties, and the values\nare strings.\n\nExample: `this.updateStyles({'--color': 'blue'})`\n\nThese properties are retained unless a value of `null` is set.\n\nNote: This function does not support updating CSS mixins.\nYou can not dynamically change the value of an `@apply`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 713,
              "column": 4
            },
            "end": {
              "line": 717,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "properties",
              "type": "Object=",
              "description": "Bag of custom property key/values to\n  apply to this element."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "resolveUrl",
          "description": "Rewrites a given URL relative to a base URL. The base URL defaults to\nthe original location of the document containing the `dom-module` for\nthis element. This method will return the same URL before and after\nbundling.\n\nNote that this function performs no resolution for URLs that start\nwith `/` (absolute URLs) or `#` (hash identifiers).  For general purpose\nURL resolution, use `window.URL`.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 735,
              "column": 4
            },
            "end": {
              "line": 740,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "url",
              "type": "string",
              "description": "URL to resolve."
            },
            {
              "name": "base",
              "type": "string=",
              "description": "Optional base URL to resolve against, defaults\nto the element's `importPath`"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Rewritten URL relative to base"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_labelChanged",
          "description": "See https://github.com/PolymerElements/paper-dropdown-menu/issues/197",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 1
            },
            "end": {
              "line": 50,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [
        {
          "name": "_parseTemplate",
          "description": "Scans a template to produce template metadata.\n\nTemplate-specific metadata are stored in the object returned, and node-\nspecific metadata are stored in objects in its flattened `nodeInfoList`\narray.  Only nodes in the template that were parsed as nodes of\ninterest contain an object in `nodeInfoList`.  Each `nodeInfo` object\ncontains an `index` (`childNodes` index in parent) and optionally\n`parent`, which points to node info of its parent (including its index).\n\nThe template metadata object returned from this method has the following\nstructure (many fields optional):\n\n```js\n  {\n    // Flattened list of node metadata (for nodes that generated metadata)\n    nodeInfoList: [\n      {\n        // `id` attribute for any nodes with id's for generating `$` map\n        id: {string},\n        // `on-event=\"handler\"` metadata\n        events: [\n          {\n            name: {string},   // event name\n            value: {string},  // handler method name\n          }, ...\n        ],\n        // Notes when the template contained a `<slot>` for shady DOM\n        // optimization purposes\n        hasInsertionPoint: {boolean},\n        // For nested `<template>`` nodes, nested template metadata\n        templateInfo: {object}, // nested template metadata\n        // Metadata to allow efficient retrieval of instanced node\n        // corresponding to this metadata\n        parentInfo: {number},   // reference to parent nodeInfo>\n        parentIndex: {number},  // index in parent's `childNodes` collection\n        infoIndex: {number},    // index of this `nodeInfo` in `templateInfo.nodeInfoList`\n      },\n      ...\n    ],\n    // When true, the template had the `strip-whitespace` attribute\n    // or was nested in a template with that setting\n    stripWhitespace: {boolean},\n    // For nested templates, nested template content is moved into\n    // a document fragment stored here; this is an optimization to\n    // avoid the cost of nested template cloning\n    content: {DocumentFragment}\n  }\n```\n\nThis method kicks off a recursive treewalk as follows:\n\n```\n   _parseTemplate <---------------------+\n     _parseTemplateContent              |\n       _parseTemplateNode  <------------|--+\n         _parseTemplateNestedTemplate --+  |\n         _parseTemplateChildNodes ---------+\n         _parseTemplateNodeAttributes\n           _parseTemplateNodeAttribute\n\n```\n\nThese methods may be overridden to add custom metadata about templates\nto either `templateInfo` or `nodeInfo`.\n\nNote that this method may be destructive to the template, in that\ne.g. event annotations may be removed after being noted in the\ntemplate metadata.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 201,
              "column": 4
            },
            "end": {
              "line": 212,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template to parse"
            },
            {
              "name": "outerTemplateInfo",
              "type": "TemplateInfo=",
              "description": "Template metadata from the outer\n  template, for parsing nested templates"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Parsed template metadata"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateContent",
          "description": "Overrides `PropertyEffects` to add map of dynamic functions on\ntemplate info, for consumption by `PropertyEffects` template binding\ncode. This map determines which method templates should have accessors\ncreated for them.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 754,
              "column": 4
            },
            "end": {
              "line": 757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "."
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseTemplateNode",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from `TextNode`'s' `textContent`.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2541,
              "column": 4
            },
            "end": {
              "line": 2555,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateChildNodes",
          "description": "Parses template child nodes for the given root node.\n\nThis method also wraps whitelisted legacy template extensions\n(`is=\"dom-if\"` and `is=\"dom-repeat\"`) with their equivalent element\nwrappers, collapses text nodes, and strips whitespace from the template\nif the `templateInfo.stripWhitespace` setting was provided.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 263,
              "column": 4
            },
            "end": {
              "line": 303,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "root",
              "type": "Node",
              "description": "Root node whose `childNodes` will be parsed"
            },
            {
              "name": "templateInfo",
              "type": "!TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "!NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNestedTemplate",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nbinding the properties that a nested template depends on to the template\nas `_host_<property>`.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2636,
              "column": 4
            },
            "end": {
              "line": 2646,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Node",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_parseTemplateNodeAttributes",
          "description": "Parses template node attributes and adds node metadata to `nodeInfo`\nfor nodes of interest.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 341,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template."
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "_parseTemplateNodeAttribute",
          "description": "Overrides default `TemplateStamp` implementation to add support for\nparsing bindings from attributes.  A `bindings`\narray is added to `nodeInfo` and populated with binding metadata\nwith information capturing the binding target, and a `parts` array\nwith one or more metadata objects capturing the source(s) of the\nbinding.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2575,
              "column": 4
            },
            "end": {
              "line": 2621,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "node",
              "type": "Element",
              "description": "Node to parse"
            },
            {
              "name": "templateInfo",
              "type": "TemplateInfo",
              "description": "Template metadata for current template"
            },
            {
              "name": "nodeInfo",
              "type": "NodeInfo",
              "description": "Node metadata for current template node"
            },
            {
              "name": "name",
              "type": "string",
              "description": "Attribute name"
            },
            {
              "name": "value",
              "type": "string",
              "description": "Attribute value"
            }
          ],
          "return": {
            "type": "boolean",
            "desc": "`true` if the visited node added node-specific\n  metadata to `nodeInfo`"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_contentForTemplate",
          "description": "Returns the `content` document fragment for a given template.\n\nFor nested templates, Polymer performs an optimization to cache nested\ntemplate content to avoid the cost of cloning deeply nested templates.\nThis method retrieves the cached content for a given template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/template-stamp.js",
            "start": {
              "line": 396,
              "column": 4
            },
            "end": {
              "line": 399,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "HTMLTemplateElement",
              "description": "Template to retrieve `content` for"
            }
          ],
          "return": {
            "type": "DocumentFragment",
            "desc": "Content fragment"
          },
          "inheritedFrom": "TemplateStamp"
        },
        {
          "name": "createProperties",
          "description": "Override of PropertiesChanged createProperties to create accessors\nand property effects for all of the properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 374,
              "column": 4
            },
            "end": {
              "line": 378,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "props",
              "type": "!Object",
              "description": "."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "attributeNameForProperty",
          "description": "Returns an attribute name that corresponds to the given property.\nThe attribute name is the lowercased property name. Override to\ncustomize this mapping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-changed.js",
            "start": {
              "line": 77,
              "column": 4
            },
            "end": {
              "line": 79,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property to convert"
            }
          ],
          "return": {
            "type": "string",
            "desc": "Attribute name corresponding to the given property."
          },
          "inheritedFrom": "PropertiesChanged"
        },
        {
          "name": "typeForProperty",
          "description": "Overrides `PropertiesChanged` method to return type specified in the\nstatic `properties` object for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 184,
              "column": 3
            },
            "end": {
              "line": 187,
              "column": 4
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name",
              "type": "string",
              "description": "Name of property"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Type to which to deserialize attribute"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "createPropertiesForAttributes",
          "description": "Generates property accessors for all attributes in the standard\nstatic `observedAttributes` array.\n\nAttribute names are mapped to property names using the `dash-case` to\n`camelCase` convention",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-accessors.js",
            "start": {
              "line": 122,
              "column": 4
            },
            "end": {
              "line": 127,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyAccessors"
        },
        {
          "name": "addPropertyEffect",
          "description": "Ensures an accessor exists for the specified property, and adds\nto a list of \"property effects\" that will run when the accessor for\nthe specified property is set.  Effects are grouped by \"type\", which\nroughly corresponds to a phase in effect processing.  The effect\nmetadata should be in the following form:\n\n    {\n      fn: effectFunction, // Reference to function to call to perform effect\n      info: { ... }       // Effect metadata passed to function\n      trigger: {          // Optional triggering metadata; if not provided\n        name: string      // the property is treated as a wildcard\n        structured: boolean\n        wildcard: boolean\n      }\n    }\n\nEffects are called from `_propertiesChanged` in the following order by\ntype:\n\n1. COMPUTE\n2. PROPAGATE\n3. REFLECT\n4. OBSERVE\n5. NOTIFY\n\nEffect functions are called with the following signature:\n\n    effectFunction(inst, path, props, oldProps, info, hasPaths)",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2260,
              "column": 4
            },
            "end": {
              "line": 2262,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "type",
              "type": "string",
              "description": "Effect type, from this.PROPERTY_EFFECT_TYPES"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createPropertyObserver",
          "description": "Creates a single-property observer for the given property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2274,
              "column": 4
            },
            "end": {
              "line": 2276,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "method",
              "type": "(string | function (*, *))",
              "description": "Function or name of observer method to call"
            },
            {
              "name": "dynamicFn",
              "type": "boolean=",
              "description": "Whether the method name should be included as\n  a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createMethodObserver",
          "description": "Creates a multi-property \"method observer\" based on the provided\nexpression, which should be a string in the form of a normal JavaScript\nfunction signature: `'methodName(arg1, [..., argn])'`.  Each argument\nshould correspond to a property or path in the context of this\nprototype (or instance), or may be a literal string or number.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2291,
              "column": 4
            },
            "end": {
              "line": 2293,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating"
            }
          ],
          "return": {
            "type": "void",
            "desc": "whether method names should be included as a dependency to the effect."
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createNotifyingProperty",
          "description": "Causes the setter for the given property to dispatch `<property>-changed`\nevents to notify of changes to the property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2303,
              "column": 4
            },
            "end": {
              "line": 2305,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReadOnlyProperty",
          "description": "Creates a read-only accessor for the given property.\n\nTo set the property, use the protected `_setProperty` API.\nTo create a custom protected setter (e.g. `_setMyProp()` for\nproperty `myProp`), pass `true` for `protectedSetter`.\n\nNote, if the property will have other property effects, this method\nshould be called first, before adding other effects.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2323,
              "column": 4
            },
            "end": {
              "line": 2325,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            },
            {
              "name": "protectedSetter",
              "type": "boolean=",
              "description": "Creates a custom protected setter\n  when `true`."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createReflectedProperty",
          "description": "Causes the setter for the given property to reflect the property value\nto a (dash-cased) attribute of the same name.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2335,
              "column": 4
            },
            "end": {
              "line": 2337,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Property name"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "createComputedProperty",
          "description": "Creates a computed property whose value is set to the result of the\nmethod described by the given `expression` each time one or more\narguments to the method changes.  The expression should be a string\nin the form of a normal JavaScript function signature:\n`'methodName(arg1, [..., argn])'`",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2353,
              "column": 4
            },
            "end": {
              "line": 2355,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "string",
              "description": "Name of computed property to set"
            },
            {
              "name": "expression",
              "type": "string",
              "description": "Method expression"
            },
            {
              "name": "dynamicFn",
              "type": "(boolean | Object)=",
              "description": "Boolean or object map indicating whether\n  method names should be included as a dependency to the effect."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "bindTemplate",
          "description": "Parses the provided template to ensure binding effects are created\nfor them, and then ensures property accessors are created for any\ndependent properties in the template.  Binding effects for bound\ntemplates are stored in a linked list on the instance so that\ntemplates can be efficiently stamped and unstamped.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2369,
              "column": 4
            },
            "end": {
              "line": 2371,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "template",
              "type": "!HTMLTemplateElement",
              "description": "Template containing binding\n  bindings"
            }
          ],
          "return": {
            "type": "!TemplateInfo",
            "desc": "Template metadata object"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_addTemplatePropertyEffect",
          "description": "Overrides `PropertyEffects` to warn on use of undeclared properties in\ntemplate.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 770,
              "column": 4
            },
            "end": {
              "line": 784,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Template metadata to add effect to"
            },
            {
              "name": "prop",
              "type": "string",
              "description": "Property that should trigger the effect"
            },
            {
              "name": "effect",
              "type": "Object=",
              "description": "Effect metadata object"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_parseBindings",
          "description": "Called to parse text in a template (either attribute values or\ntextContent) into binding metadata.\n\nAny overrides of this method should return an array of binding part\nmetadata  representing one or more bindings found in the provided text\nand any \"literal\" text in between.  Any non-literal parts will be passed\nto `_evaluateBinding` when any dependencies change.  The only required\nfields of each \"part\" in the returned array are as follows:\n\n- `dependencies` - Array containing trigger metadata for each property\n  that should trigger the binding to update\n- `literal` - String containing text if the part represents a literal;\n  in this case no `dependencies` are needed\n\nAdditional metadata for use by `_evaluateBinding` may be provided in\neach part object as needed.\n\nThe default implementation handles the following types of bindings\n(one or more may be intermixed with literal strings):\n- Property binding: `[[prop]]`\n- Path binding: `[[object.prop]]`\n- Negated property or path bindings: `[[!prop]]` or `[[!object.prop]]`\n- Two-way property or path bindings (supports negation):\n  `{{prop}}`, `{{object.prop}}`, `{{!prop}}` or `{{!object.prop}}`\n- Inline computed method (supports negation):\n  `[[compute(a, 'literal', b)]]`, `[[!compute(a, 'literal', b)]]`\n\nThe default implementation uses a regular expression for best\nperformance. However, the regular expression uses a white-list of\nallowed characters in a data-binding, which causes problems for\ndata-bindings that do use characters not in this white-list.\n\nInstead of updating the white-list with all allowed characters,\nthere is a StrictBindingParser (see lib/mixins/strict-binding-parser)\nthat uses a state machine instead. This state machine is able to handle\nall characters. However, it is slightly less performant, therefore we\nextracted it into a separate optional mixin.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2692,
              "column": 4
            },
            "end": {
              "line": 2757,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "text",
              "type": "string",
              "description": "Text to parse from attribute or textContent"
            },
            {
              "name": "templateInfo",
              "type": "Object",
              "description": "Current template metadata"
            }
          ],
          "return": {
            "type": "Array.<!BindingPart>",
            "desc": "Array of binding part metadata"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "_evaluateBinding",
          "description": "Called to evaluate a previously parsed binding part based on a set of\none or more changed dependencies.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/property-effects.js",
            "start": {
              "line": 2773,
              "column": 4
            },
            "end": {
              "line": 2790,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "inst",
              "type": "!Polymer_PropertyEffects",
              "description": "Element that should be used as\n    scope for binding dependencies"
            },
            {
              "name": "part",
              "type": "BindingPart",
              "description": "Binding part metadata"
            },
            {
              "name": "path",
              "type": "string",
              "description": "Property/path that triggered this effect"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "Bag of current property changes"
            },
            {
              "name": "oldProps",
              "type": "Object",
              "description": "Bag of previous values for changed properties"
            },
            {
              "name": "hasPaths",
              "type": "boolean",
              "description": "True with `props` contains one or more paths"
            }
          ],
          "return": {
            "type": "*",
            "desc": "Value the binding part evaluated to"
          },
          "inheritedFrom": "PropertyEffects"
        },
        {
          "name": "finalize",
          "description": "Finalizes an element definition, including ensuring any super classes\nare also finalized. This includes ensuring property\naccessors exist on the element prototype. This method calls\n`_finalizeClass` to finalize each constructor in the prototype chain.",
          "privacy": "public",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/properties-mixin.js",
            "start": {
              "line": 132,
              "column": 3
            },
            "end": {
              "line": 141,
              "column": 4
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "PropertiesMixin"
        },
        {
          "name": "_finalizeClass",
          "description": "Override of PropertiesMixin _finalizeClass to create observers and\nfind the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 343,
              "column": 4
            },
            "end": {
              "line": 350,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_prepareTemplate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 352,
              "column": 4
            },
            "end": {
              "line": 365,
              "column": 5
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "createObservers",
          "description": "Creates observers for the given `observers` array.\nLeverages `PropertyEffects` to create observers.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 391,
              "column": 4
            },
            "end": {
              "line": 396,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "observers",
              "type": "Object",
              "description": "Array of observer descriptors for\n  this class"
            },
            {
              "name": "dynamicFns",
              "type": "Object",
              "description": "Object containing keys for any properties\n  that are functions and should trigger the effect when the function\n  reference is changed"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_processStyleText",
          "description": "Gather style text for a style element in the template.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 575,
              "column": 4
            },
            "end": {
              "line": 577,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cssText",
              "type": "string",
              "description": "Text containing styling to process"
            },
            {
              "name": "baseURI",
              "type": "string",
              "description": "Base URI to rebase CSS paths against"
            }
          ],
          "return": {
            "type": "string",
            "desc": "The processed CSS text"
          },
          "inheritedFrom": "ElementMixin"
        },
        {
          "name": "_finalizeTemplate",
          "description": "Configures an element `proto` to function with a given `template`.\nThe element name `is` and extends `ext` must be specified for ShadyCSS\nstyle scoping.",
          "privacy": "protected",
          "sourceRange": {
            "file": "../@polymer/polymer/lib/mixins/element-mixin.js",
            "start": {
              "line": 588,
              "column": 4
            },
            "end": {
              "line": 599,
              "column": 5
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "is",
              "type": "string",
              "description": "Tag name (or type extension name) for this element"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "ElementMixin"
        }
      ],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 7,
          "column": 0
        },
        "end": {
          "line": 51,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "PolymerElement",
      "name": "OmnitableItem",
      "attributes": [
        {
          "name": "label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 33,
              "column": 3
            },
            "end": {
              "line": 36,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-item"
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-amount.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "max",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 3
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"70px\""
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 3
            },
            "end": {
              "line": 91,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"70px\""
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 96,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"amount-cell align-right\""
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"amount-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "currency",
          "type": "string | null | undefined",
          "description": "Base Currency used in filters",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "autodetect",
          "type": "boolean | null | undefined",
          "description": "If this is set true then currency property will be the currency with highest occurrence in values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 3
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "rates",
          "type": "Object | null | undefined",
          "description": "Exchange rates of currencies. Example: {\"EUR\": 1, \"USD\":0.8169982616, \"AUD\":0.6529827192, \"SEK\": 0.1019271438}'\nDefault exchange rate is 1 and it is used for every currency that is present on column values but missing from exchange rates object.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 101,
              "column": 3
            },
            "end": {
              "line": 104,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 187,
              "column": 1
            },
            "end": {
              "line": 189,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getComparableValue",
          "description": "Get the comparable value of an item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 202,
              "column": 1
            },
            "end": {
              "line": 216,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "description": "Property path"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Valid value or void"
          }
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 191,
              "column": 1
            },
            "end": {
              "line": 193,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 1
            },
            "end": {
              "line": 226,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "renderValue",
          "description": "Converts an amount to symbol and value to be rendered.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 252,
              "column": 1
            },
            "end": {
              "line": 259,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "Amount to be formated"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Formated value or empty string."
          }
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 298,
              "column": 1
            },
            "end": {
              "line": 307,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ]
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 277,
              "column": 1
            },
            "end": {
              "line": 283,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 1
            },
            "end": {
              "line": 314,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 316,
              "column": 1
            },
            "end": {
              "line": 328,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valuesChanged",
          "description": "Auto-detect currency property: Most frequently occurring currency",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 115,
              "column": 1
            },
            "end": {
              "line": 140,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "autodetect",
              "type": "boolean",
              "description": "Whether the currency property will be the currency with highest occurrence in values or not."
            },
            {
              "name": "currency",
              "type": "string",
              "description": "Base currency used in filters."
            },
            {
              "name": "values",
              "type": "Array",
              "description": "Array of amounts"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toAmount",
          "description": "Converts a value to an amount object optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 150,
              "column": 1
            },
            "end": {
              "line": 185,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "Object",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "Object",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Object | void)",
            "desc": "Value converted to Number or void"
          }
        },
        {
          "name": "getCurrency",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 228,
              "column": 1
            },
            "end": {
              "line": 231,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ]
        },
        {
          "name": "getFormatter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 233,
              "column": 1
            },
            "end": {
              "line": 244,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "currency"
            },
            {
              "name": "locale"
            }
          ]
        },
        {
          "name": "_amountValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 275,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toInputStringAmount",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 285,
              "column": 1
            },
            "end": {
              "line": 296,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 329,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnAmount",
      "attributes": [
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 3
            },
            "end": {
              "line": 87,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 3
            },
            "end": {
              "line": 91,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 96,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "currency",
          "description": "Base Currency used in filters",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "autodetect",
          "description": "If this is set true then currency property will be the currency with highest occurrence in values",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 3
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "rates",
          "description": "Exchange rates of currencies. Example: {\"EUR\": 1, \"USD\":0.8169982616, \"AUD\":0.6529827192, \"SEK\": 0.1019271438}'\nDefault exchange rate is 1 and it is used for every currency that is present on column values but missing from exchange rates object.",
          "sourceRange": {
            "start": {
              "line": 81,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-amount",
      "mixins": [
        "Cosmoz.RangeColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-autocomplete.js",
      "properties": [
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 3
            },
            "end": {
              "line": 52,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Ask for a list of values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 3
            },
            "end": {
              "line": 44,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"55px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 3
            },
            "end": {
              "line": 82,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"55px\""
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"autocomplete-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "query",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"text\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        }
      ],
      "methods": [
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 1
            },
            "end": {
              "line": 104,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 106,
              "column": 1
            },
            "end": {
              "line": 111,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 1
            },
            "end": {
              "line": 88,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 169,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 116,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 145,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_unique",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 147,
              "column": 1
            },
            "end": {
              "line": 165,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values"
            },
            {
              "name": "valueProperty"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 170,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnAutocomplete",
      "attributes": [
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 46,
              "column": 3
            },
            "end": {
              "line": 52,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bind-values",
          "description": "Ask for a list of values",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 3
            },
            "end": {
              "line": 44,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 3
            },
            "end": {
              "line": 82,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "query",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "text-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 59,
              "column": 3
            },
            "end": {
              "line": 62,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "filter-changed",
          "description": "Fired when the `filter` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "query-changed",
          "description": "Fired when the `query` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-autocomplete",
      "mixins": [
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-boolean.js",
      "properties": [
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "No need to grow, as the values in a boolean column should have known fixed width",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"0\""
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-header-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "trueLabel",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"True\""
        },
        {
          "name": "falseLabel",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"False\""
        },
        {
          "name": "_textFilter",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 3
            },
            "end": {
              "line": 69,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_textFilterChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "templatetemplateWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 3
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"60px\""
        }
      ],
      "methods": [
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 117,
              "column": 1
            },
            "end": {
              "line": 120,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ]
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 1
            },
            "end": {
              "line": 174,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 1
            },
            "end": {
              "line": 155,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 122,
              "column": 1
            },
            "end": {
              "line": 126,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 1
            },
            "end": {
              "line": 130,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 1
            },
            "end": {
              "line": 162,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ]
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 164,
              "column": 1
            },
            "end": {
              "line": 167,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_textFilterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "textFilter"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 108,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeSelected",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 132,
              "column": 1
            },
            "end": {
              "line": 137,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 175,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnBoolean",
      "attributes": [
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "No need to grow, as the values in a boolean column should have known fixed width",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "true-label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 3
            },
            "end": {
              "line": 59,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "false-label",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "templatetemplate-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 71,
              "column": 3
            },
            "end": {
              "line": 74,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "filter-changed",
          "description": "Fired when the `filter` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-boolean",
      "mixins": [
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-date.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"82px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"82px\""
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"date-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 94,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "formatter",
              "defaultValue": "this.formatter"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 1
            },
            "end": {
              "line": 81,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ]
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 96,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 408,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toDate",
          "description": "Converts an value to date optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Date | String)",
              "description": "Value to convert to date"
            },
            {
              "name": "limit",
              "type": "(Date | String)",
              "description": "Value used to limit the date"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "Function used to limit the date (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Date | void)",
            "desc": "Value converted to date optionaly limitated"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getAbsoluteISOString",
          "description": "Computes the local timezone and adds it to a local ISO string",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string, without timezone info"
            }
          ],
          "return": {
            "type": "String",
            "desc": "an ISO date string, with timezone info"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_getTimezoneString",
          "description": "Calculates the local timezone offset and formats it to ISO Timezone string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string"
            }
          ],
          "return": {
            "type": "String",
            "desc": "the ISO timezone"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_computeFormatter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_dateValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_toLocalISOString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 19,
          "column": 0
        },
        "end": {
          "line": 107,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnDate",
      "attributes": [
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 57,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-date",
      "mixins": [
        "Cosmoz.DateColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-list-data.js",
      "properties": [
        {
          "name": "items",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_expanded",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 3
            },
            "end": {
              "line": 70,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_othersCount",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 3
            },
            "end": {
              "line": 75,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Number"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "isEmpty",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 79,
              "column": 1
            },
            "end": {
              "line": 82,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_firstItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 84,
              "column": 1
            },
            "end": {
              "line": 88,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_hideExpand",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 90,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "expanded"
            }
          ]
        },
        {
          "name": "_hideCollapse",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "expanded"
            }
          ]
        },
        {
          "name": "_otherItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 1
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "expanded"
            }
          ]
        },
        {
          "name": "_computeOthersCount",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 1
            },
            "end": {
              "line": 116,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            }
          ]
        },
        {
          "name": "_toggleExpand",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 123,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 14,
          "column": 0
        },
        "end": {
          "line": 124,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnListData",
      "attributes": [
        {
          "name": "items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 63,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-list-data",
      "mixins": [
        "Cosmoz.Mixins.translatable"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-list.js",
      "properties": [
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 3
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Ask for a list of values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-header-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "autocompleteItems",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "readOnly": true,
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 130,
              "column": 1
            },
            "end": {
              "line": 132,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 128,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filters"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getTexts",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 1
            },
            "end": {
              "line": 86,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "item"
            },
            {
              "name": "textProperty"
            }
          ]
        },
        {
          "name": "_computeAutocompleteItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 111,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valueProperty"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 17,
          "column": 0
        },
        "end": {
          "line": 133,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnList",
      "attributes": [
        {
          "name": "text-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 3
            },
            "end": {
              "line": 71,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 73,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 66,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bind-values",
          "description": "Ask for a list of values",
          "sourceRange": {
            "start": {
              "line": 54,
              "column": 3
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "autocomplete-items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 3
            },
            "end": {
              "line": 49,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "autocomplete-items-changed",
          "description": "Fired when the `autocompleteItems` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "filter-changed",
          "description": "Fired when the `filter` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-list",
      "mixins": [
        "Cosmoz.ListColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-list-horizontal.js",
      "properties": [
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-list-mixin.js",
            "start": {
              "line": 11,
              "column": 3
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"label\"",
          "inheritedFrom": "Cosmoz.ListColumnMixin"
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-list-mixin.js",
            "start": {
              "line": 16,
              "column": 3
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\"",
          "inheritedFrom": "Cosmoz.ListColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 84,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Ask for a list of values",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-header-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "autocompleteSelectedItems",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 141,
              "column": 1
            },
            "end": {
              "line": 143,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 116,
              "column": 1
            },
            "end": {
              "line": 122,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 1
            },
            "end": {
              "line": 139,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeAutocompleteItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 107,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "values",
              "defaultValue": "this.values"
            }
          ]
        },
        {
          "name": "_getLabelForValue",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 109,
              "column": 1
            },
            "end": {
              "line": 114,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 16,
          "column": 0
        },
        "end": {
          "line": 144,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnListHorizontal",
      "attributes": [
        {
          "name": "text-property",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-list-mixin.js",
            "start": {
              "line": 11,
              "column": 3
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.ListColumnMixin"
        },
        {
          "name": "value-property",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-list-mixin.js",
            "start": {
              "line": 16,
              "column": 3
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.ListColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 84,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "bind-values",
          "description": "Ask for a list of values",
          "sourceRange": {
            "start": {
              "line": 72,
              "column": 3
            },
            "end": {
              "line": 76,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "autocomplete-selected-items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 67,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "filter-changed",
          "description": "Fired when the `filter` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-list-horizontal",
      "mixins": [
        "Cosmoz.ListColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-number.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "max",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"30px\""
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 3
            },
            "end": {
              "line": 69,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"30px\""
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"number-cell align-right\""
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"number-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "maximumFractionDigits",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "minimumFractionDigits",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "formatter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 3
            },
            "end": {
              "line": 85,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 89,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "Get the comparable value of an item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 1
            },
            "end": {
              "line": 151,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "description": "Property path"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Valid value or void"
          }
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 153,
              "column": 1
            },
            "end": {
              "line": 159,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "formatter",
              "defaultValue": "this.formatter"
            }
          ]
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 262,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 408,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFormatter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 104,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            },
            {
              "name": "minimumFractionDigits"
            },
            {
              "name": "maximumFractionDigits"
            }
          ]
        },
        {
          "name": "onBadInputFloatLabel",
          "description": "Check if label should float based on validity\n\nNumber inputs can have allowed characters that aren't numbers (-,e) and won't\ntrigger a value change and thus not float the label.\nHowever, the validity will report badInput so we can trigger a label float by\nsetting it to something truthy but still not visible.\nFixed in paper-input 3.x",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 1
            },
            "end": {
              "line": 124,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "KeyboardEvent"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 160,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnNumber",
      "attributes": [
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 3
            },
            "end": {
              "line": 65,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 66,
              "column": 3
            },
            "end": {
              "line": 69,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 58,
              "column": 3
            },
            "end": {
              "line": 61,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "maximum-fraction-digits",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 74,
              "column": 3
            },
            "end": {
              "line": 77,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "minimum-fraction-digits",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 78,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "formatter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 3
            },
            "end": {
              "line": 85,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-number",
      "mixins": [
        "Cosmoz.RangeColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-time.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"63px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 3
            },
            "end": {
              "line": 78,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"63px\""
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"time-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fixedDate",
          "type": "?",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 82,
              "column": 1
            },
            "end": {
              "line": 84,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "filterStep",
          "type": "string | null | undefined",
          "description": "Specifies the value granularity of the time input's value in the filter.\n1 => full seconds\n0.1 => milliseconds",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\""
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "Get the comparable value of an item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 1
            },
            "end": {
              "line": 149,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "description": "Property path"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Valid value or void"
          }
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 151,
              "column": 1
            },
            "end": {
              "line": 156,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "formatter",
              "defaultValue": "this.formatter"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 1
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 1
            },
            "end": {
              "line": 119,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 121,
              "column": 1
            },
            "end": {
              "line": 127,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "toDate",
          "description": "Converts time to date optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 94,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Date | Number)",
              "description": "Date or Timestamp ( miliseconds since property _fixedDate ) to be converted"
            },
            {
              "name": "limit",
              "type": "(Date | Number)",
              "description": "Optional value to limit the date."
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "Function used to limit the date (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Date | void)",
            "desc": "Value converted to date optionaly limitated"
          }
        },
        {
          "name": "getAbsoluteISOString",
          "description": "Computes the local timezone and adds it to a local ISO string",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string, without timezone info"
            }
          ],
          "return": {
            "type": "String",
            "desc": "an ISO date string, with timezone info"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_getTimezoneString",
          "description": "Calculates the local timezone offset and formats it to ISO Timezone string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string"
            }
          ],
          "return": {
            "type": "String",
            "desc": "the ISO timezone"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_computeFormatter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 1
            },
            "end": {
              "line": 183,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ]
        },
        {
          "name": "_dateValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_toLocalISOString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_timeValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 184,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnTime",
      "attributes": [
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 3
            },
            "end": {
              "line": 78,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter-step",
          "description": "Specifies the value granularity of the time input's value in the filter.\n1 => full seconds\n0.1 => milliseconds",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-time",
      "mixins": [
        "Cosmoz.DateColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-datetime.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"210px\""
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"320px\""
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"128px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 3
            },
            "end": {
              "line": 78,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"128px\""
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\"",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"datetime-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filterStep",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 3
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "1"
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 112,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "formatter",
              "defaultValue": "this.formatter"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 87,
              "column": 1
            },
            "end": {
              "line": 93,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 104,
              "column": 1
            },
            "end": {
              "line": 110,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "toDate",
          "description": "Converts an value to date optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Date | String)",
              "description": "Value to convert to date"
            },
            {
              "name": "limit",
              "type": "(Date | String)",
              "description": "Value used to limit the date"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "Function used to limit the date (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Date | void)",
            "desc": "Value converted to date optionaly limitated"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getAbsoluteISOString",
          "description": "Computes the local timezone and adds it to a local ISO string",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string, without timezone info"
            }
          ],
          "return": {
            "type": "String",
            "desc": "an ISO date string, with timezone info"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_getTimezoneString",
          "description": "Calculates the local timezone offset and formats it to ISO Timezone string.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string"
            }
          ],
          "return": {
            "type": "String",
            "desc": "the ISO timezone"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_computeFormatter",
          "description": "OVERRIDES",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 1
            },
            "end": {
              "line": 129,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ]
        },
        {
          "name": "_dateValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "_toLocalISOString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date"
            }
          ],
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 18,
          "column": 0
        },
        "end": {
          "line": 130,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "OmnitableColumnDatetime",
      "attributes": [
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 63,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 65,
              "column": 3
            },
            "end": {
              "line": 68,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "formatter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-date-mixin.js",
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.DateColumnMixin"
        },
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 70,
              "column": 3
            },
            "end": {
              "line": 73,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 3
            },
            "end": {
              "line": 78,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 80,
              "column": 3
            },
            "end": {
              "line": 83,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-mixin.js",
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.OmnitableColumnMixin"
        },
        {
          "name": "filter-step",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 3
            },
            "end": {
              "line": 58,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable-column-datetime",
      "mixins": [
        "Cosmoz.DateColumnMixin",
        "Cosmoz.OmnitableColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable.js",
      "properties": [
        {
          "name": "csvFilename",
          "type": "string | null | undefined",
          "description": "Filename when saving as CSV",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 3
            },
            "end": {
              "line": 210,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"omnitable.csv\""
        },
        {
          "name": "xlsxFilename",
          "type": "string | null | undefined",
          "description": "Filename when saving as XLSX",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"omnitable.xlsx\""
        },
        {
          "name": "xlsxSheetname",
          "type": "string | null | undefined",
          "description": "Sheet name when saving as XLSX",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 3
            },
            "end": {
              "line": 226,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"Omnitable\""
        },
        {
          "name": "data",
          "type": "Array | null | undefined",
          "description": "Array used to list items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 3
            },
            "end": {
              "line": 233,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_dataIsValid",
          "type": "boolean | null | undefined",
          "description": "True if data is a valid and not empty array.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 238,
              "column": 3
            },
            "end": {
              "line": 242,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "displayEmptyGroups",
          "type": "boolean | null | undefined",
          "description": "If set to true, then group a row will be displayed for groups that contain no items.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 3
            },
            "end": {
              "line": 250,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "enabledColumns",
          "type": "Array | null | undefined",
          "description": "Specific columns to enable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 3
            },
            "end": {
              "line": 258,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debounceUpdateColumns\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "hasActions",
          "type": "boolean | null | undefined",
          "description": "Whether bottom-bar has actions.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 3
            },
            "end": {
              "line": 266,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Shows a loading overlay to indicate data will be updated",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 3
            },
            "end": {
              "line": 274,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "_showCheckboxes",
          "type": "boolean | null | undefined",
          "description": "Whether to show checkboxes to perform bottom-bar actions on",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 279,
              "column": 3
            },
            "end": {
              "line": 282,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "selectedItems",
          "type": "Array | null | undefined",
          "description": "List of selected rows/items in `data`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 3
            },
            "end": {
              "line": 290,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "highlightedItems",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 3
            },
            "end": {
              "line": 295,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "descending",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 3
            },
            "end": {
              "line": 301,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 3
            },
            "end": {
              "line": 307,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "sortOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 3
            },
            "end": {
              "line": 312,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "groupOnDescending",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 3
            },
            "end": {
              "line": 318,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debounceGroupItems\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "The column name to group on.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 3
            },
            "end": {
              "line": 326,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "String"
            }
          },
          "defaultValue": "\"\""
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "The column that matches the current `groupOn` value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 3
            },
            "end": {
              "line": 336,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_groupOnColumnChanged\"",
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "filteredItems",
          "type": "Array | null | undefined",
          "description": "Items matching current set filter(s)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 3
            },
            "end": {
              "line": 345,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_debounceGroupItems\"",
              "attributeType": "Array"
            }
          },
          "defaultValue": "[]"
        },
        {
          "name": "filteredGroupedItems",
          "type": "Array | null | undefined",
          "description": "Grouped items structure after filtering.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 3
            },
            "end": {
              "line": 352,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "sortedFilteredGroupedItems",
          "type": "Array | null | undefined",
          "description": "Sorted items structure after filtering and grouping.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 3
            },
            "end": {
              "line": 360,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_previousWidth",
          "type": "number | null | undefined",
          "description": "Keep track of width-changes to identify if we go bigger or smaller",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 365,
              "column": 3
            },
            "end": {
              "line": 368,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "_groupsCount",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 370,
              "column": 3
            },
            "end": {
              "line": 373,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "List of columns definition for this table.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 3
            },
            "end": {
              "line": 381,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "visible",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 3
            },
            "end": {
              "line": 389,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"visibleChanged\"",
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "visibleColumns",
          "type": "Array | null | undefined",
          "description": "List of <b>visible</b> columns.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 3
            },
            "end": {
              "line": 398,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "observer": "\"_visibleColumnsChanged\"",
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "disabledColumns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 3
            },
            "end": {
              "line": 403,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "_filterIsTooStrict",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 405,
              "column": 3
            },
            "end": {
              "line": 408,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "hashParam",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 3
            },
            "end": {
              "line": 412,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "_routeHash",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 414,
              "column": 3
            },
            "end": {
              "line": 417,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_routeHashKeyRule",
          "type": "RegExp | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 418,
              "column": 3
            },
            "end": {
              "line": 421,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "RegExp"
            }
          }
        },
        {
          "name": "_allSelected",
          "type": "boolean | null | undefined",
          "description": "True when all items are selected.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 426,
              "column": 3
            },
            "end": {
              "line": 428,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "connectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 453,
              "column": 1
            },
            "end": {
              "line": 483,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 485,
              "column": 1
            },
            "end": {
              "line": 503,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "flush",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 505,
              "column": 1
            },
            "end": {
              "line": 527,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_cancelDebouncers",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 529,
              "column": 1
            },
            "end": {
              "line": 531,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeDataValidity",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 535,
              "column": 1
            },
            "end": {
              "line": 537,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  base: data\n} = {}"
            }
          ]
        },
        {
          "name": "_computeFilterIsTooStrict",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 539,
              "column": 1
            },
            "end": {
              "line": 541,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataIsValid"
            },
            {
              "name": "visibleItemsLength"
            }
          ]
        },
        {
          "name": "_computeSortDirection",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 543,
              "column": 1
            },
            "end": {
              "line": 546,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "descending"
            }
          ]
        },
        {
          "name": "_computeShowCheckboxes",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 548,
              "column": 1
            },
            "end": {
              "line": 550,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "dataIsValid"
            },
            {
              "name": "hasActions"
            }
          ]
        },
        {
          "name": "visibleChanged",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 552,
              "column": 1
            },
            "end": {
              "line": 556,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "turnedVisible"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_visibleColumnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 558,
              "column": 1
            },
            "end": {
              "line": 561,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onUpdateItemSize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 563,
              "column": 1
            },
            "end": {
              "line": 569,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onColumnTitleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 571,
              "column": 1
            },
            "end": {
              "line": 588,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onColumnEditableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 590,
              "column": 1
            },
            "end": {
              "line": 604,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onGroupCheckboxChange",
          "description": "Handle selection/deselection of a group",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 607,
              "column": 1
            },
            "end": {
              "line": 615,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onItemCheckboxChange",
          "description": "Handle selection/deselection of an item",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 618,
              "column": 1
            },
            "end": {
              "line": 628,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_itemRowTapped",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 630,
              "column": 1
            },
            "end": {
              "line": 633,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onResize",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 635,
              "column": 1
            },
            "end": {
              "line": 638,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_dataChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 640,
              "column": 1
            },
            "end": {
              "line": 646,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounceUpdateColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 648,
              "column": 1
            },
            "end": {
              "line": 650,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 652,
              "column": 1
            },
            "end": {
              "line": 718,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_verifyColumnSetup",
          "description": "Checks if the column setup is valid and logs errors.\nAs a separate functions to make testing easier.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 726,
              "column": 1
            },
            "end": {
              "line": 743,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns",
              "type": "any",
              "description": "The columns."
            },
            {
              "name": "columnNames",
              "type": "any",
              "defaultValue": "columns.map(c => c.name)",
              "description": "The column names."
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if setup is valid."
          }
        },
        {
          "name": "_onColumnValuesUpdate",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 745,
              "column": 1
            },
            "end": {
              "line": 750,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  detail\n}"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_setColumnValues",
          "description": "TODO: should process (distinct, sort, min, max) the values at the column level depending on the column type",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 753,
              "column": 1
            },
            "end": {
              "line": 774,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columns",
              "defaultValue": "this.columns"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getColumn",
          "description": "Returns a column based on an attribute.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 781,
              "column": 1
            },
            "end": {
              "line": 790,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "attributeValue",
              "type": "String",
              "description": "The value of the column attribute."
            },
            {
              "name": "attribute",
              "type": "String",
              "defaultValue": "'name'",
              "description": "The attribute name of the column."
            },
            {
              "name": "columns",
              "defaultValue": "this.columns"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The found column."
          }
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 792,
              "column": 1
            },
            "end": {
              "line": 798,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  detail\n}"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounceFilterItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 800,
              "column": 1
            },
            "end": {
              "line": 802,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 804,
              "column": 1
            },
            "end": {
              "line": 824,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 826,
              "column": 1
            },
            "end": {
              "line": 832,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounceGroupItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 834,
              "column": 1
            },
            "end": {
              "line": 839,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_groupItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 841,
              "column": 1
            },
            "end": {
              "line": 893,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounceSortItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 895,
              "column": 1
            },
            "end": {
              "line": 900,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_genericSorter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 902,
              "column": 1
            },
            "end": {
              "line": 934,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a"
            },
            {
              "name": "b"
            }
          ]
        },
        {
          "name": "sorter",
          "description": "compareFunction for sort(), can be overridden",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 944,
              "column": 1
            },
            "end": {
              "line": 949,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "a",
              "type": "*",
              "description": "First compare value"
            },
            {
              "name": "b",
              "type": "*",
              "description": "Second compare value"
            }
          ],
          "return": {
            "type": "number",
            "desc": "-1 if a has lower index, 0 if a and b index are same, 1 if b is lower"
          }
        },
        {
          "name": "_sortFilteredGroupedItems",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 951,
              "column": 1
            },
            "end": {
              "line": 995,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounceAdjustColumns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 997,
              "column": 1
            },
            "end": {
              "line": 1002,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_adjustColumns",
          "description": "Enable/disable columns to properly fit in the available space.\nAdjust headers width according to cells width",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1009,
              "column": 1
            },
            "end": {
              "line": 1067,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Boolean",
            "desc": "Return"
          }
        },
        {
          "name": "_adjustHeadersWidth",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1069,
              "column": 1
            },
            "end": {
              "line": 1086,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "cells"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_canScaleUp",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1088,
              "column": 1
            },
            "end": {
              "line": 1106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "width"
            }
          ]
        },
        {
          "name": "_disableColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1108,
              "column": 1
            },
            "end": {
              "line": 1125,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_enableColumn",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1127,
              "column": 1
            },
            "end": {
              "line": 1135,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_isEmpty",
          "description": "Helper method for Polymer 1.0+ templates - check if variable\nis undefined, null, empty Array list or empty String.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1144,
              "column": 1
            },
            "end": {
              "line": 1159,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "type": "Object",
              "description": "variable"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if \"empty\", false otherwise\n^memberOf element/cz-omnitable"
          }
        },
        {
          "name": "_makeCsvField",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1161,
              "column": 1
            },
            "end": {
              "line": 1167,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "str"
            }
          ]
        },
        {
          "name": "_saveAsCsvAction",
          "description": "Triggers a download of selected rows as a CSV file.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1172,
              "column": 1
            },
            "end": {
              "line": 1191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_prepareXlsxData",
          "description": "Makes the data ready to be exported as XLSX.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1197,
              "column": 1
            },
            "end": {
              "line": 1208,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "Array",
            "desc": "data Array of prepared rows."
          }
        },
        {
          "name": "_saveAsXlsxAction",
          "description": "Triggers a download of selected rows as a XLSX file.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1215,
              "column": 1
            },
            "end": {
              "line": 1222,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_getGroupRowClasses",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1226,
              "column": 1
            },
            "end": {
              "line": 1228,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "folded"
            }
          ]
        },
        {
          "name": "_getFoldIcon",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1229,
              "column": 1
            },
            "end": {
              "line": 1231,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "expanded"
            }
          ]
        },
        {
          "name": "_applySortingDirection",
          "description": "Called if an item from the sortOn dropdown gets tapped.\nReverses the descending value if the sortOn value did not change.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1239,
              "column": 1
            },
            "end": {
              "line": 1251,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "e",
              "type": "Event",
              "description": "The event with the column model."
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_toggleGroup",
          "description": "Toggle folding of a group",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1257,
              "column": 1
            },
            "end": {
              "line": 1266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "event"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_toggleItem",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1268,
              "column": 1
            },
            "end": {
              "line": 1271,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onAction",
          "description": "Turn an `action` event into a `run` event",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1278,
              "column": 1
            },
            "end": {
              "line": 1288,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event",
              "type": "Event",
              "description": "`action` event"
            },
            {
              "name": "detail",
              "type": "Object",
              "description": "`action` event details"
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "_selectedItemsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1290,
              "column": 1
            },
            "end": {
              "line": 1294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_onAllCheckboxChange",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1296,
              "column": 1
            },
            "end": {
              "line": 1306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "removeItems",
          "description": "Remove multiple items from `data`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1315,
              "column": 1
            },
            "end": {
              "line": 1325,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items",
              "type": "Array",
              "description": "Array of items to remove"
            }
          ],
          "return": {
            "type": "Array",
            "desc": "Array containing removed items"
          }
        },
        {
          "name": "removeItem",
          "description": "Helper method to remove an item from `data`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1331,
              "column": 1
            },
            "end": {
              "line": 1336,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to remove"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "item removed"
          }
        },
        {
          "name": "setItemValue",
          "description": "Convenience method for setting a value to an item's path and notifying any\nelement bound to this item's path.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1345,
              "column": 1
            },
            "end": {
              "line": 1350,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "The item."
            },
            {
              "name": "itemPath",
              "type": "itemPath",
              "description": "The path of the item."
            },
            {
              "name": "value",
              "type": "String",
              "description": "The new value of the item."
            }
          ],
          "return": {
            "type": "undefined"
          }
        },
        {
          "name": "selectItem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1352,
              "column": 1
            },
            "end": {
              "line": 1354,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "deselectItem",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1356,
              "column": 1
            },
            "end": {
              "line": 1358,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "isItemSelected",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1360,
              "column": 1
            },
            "end": {
              "line": 1362,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "isItemHighlighted",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1364,
              "column": 1
            },
            "end": {
              "line": 1366,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "highlight",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 1368,
              "column": 1
            },
            "end": {
              "line": 1378,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "items"
            },
            {
              "name": "reverse"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_routeHashPropertyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1380,
              "column": 1
            },
            "end": {
              "line": 1386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_routeHashFilterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1388,
              "column": 1
            },
            "end": {
              "line": 1410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computeRouteHashKeyRule",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1411,
              "column": 1
            },
            "end": {
              "line": 1416,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "hashParam"
            }
          ]
        },
        {
          "name": "_routeHashKeyChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1417,
              "column": 1
            },
            "end": {
              "line": 1431,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            },
            {
              "name": "value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateParamsFromHash",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1433,
              "column": 1
            },
            "end": {
              "line": 1441,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateRouteParam",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1443,
              "column": 1
            },
            "end": {
              "line": 1457,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "key"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterForRouteChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1459,
              "column": 1
            },
            "end": {
              "line": 1473,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fitDropdowns",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1475,
              "column": 1
            },
            "end": {
              "line": 1482,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_debounce",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 1484,
              "column": 1
            },
            "end": {
              "line": 1486,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "name"
            },
            {
              "name": "fn"
            },
            {
              "name": "asyncModule",
              "defaultValue": "Async.timeOut.after(0)"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [
        {
          "url": "demo/index.html",
          "description": ""
        }
      ],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 56,
          "column": 0
        },
        "end": {
          "line": 1487,
          "column": 1
        }
      },
      "privacy": "public",
      "superclass": "HTMLElement",
      "name": "Omnitable",
      "attributes": [
        {
          "name": "csv-filename",
          "description": "Filename when saving as CSV",
          "sourceRange": {
            "start": {
              "line": 207,
              "column": 3
            },
            "end": {
              "line": 210,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "xlsx-filename",
          "description": "Filename when saving as XLSX",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "xlsx-sheetname",
          "description": "Sheet name when saving as XLSX",
          "sourceRange": {
            "start": {
              "line": 223,
              "column": 3
            },
            "end": {
              "line": 226,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "data",
          "description": "Array used to list items.",
          "sourceRange": {
            "start": {
              "line": 231,
              "column": 3
            },
            "end": {
              "line": 233,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "display-empty-groups",
          "description": "If set to true, then group a row will be displayed for groups that contain no items.",
          "sourceRange": {
            "start": {
              "line": 247,
              "column": 3
            },
            "end": {
              "line": 250,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "enabled-columns",
          "description": "Specific columns to enable",
          "sourceRange": {
            "start": {
              "line": 255,
              "column": 3
            },
            "end": {
              "line": 258,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "has-actions",
          "description": "Whether bottom-bar has actions.",
          "sourceRange": {
            "start": {
              "line": 263,
              "column": 3
            },
            "end": {
              "line": 266,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "loading",
          "description": "Shows a loading overlay to indicate data will be updated",
          "sourceRange": {
            "start": {
              "line": 271,
              "column": 3
            },
            "end": {
              "line": 274,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "selected-items",
          "description": "List of selected rows/items in `data`.",
          "sourceRange": {
            "start": {
              "line": 287,
              "column": 3
            },
            "end": {
              "line": 290,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "highlighted-items",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 292,
              "column": 3
            },
            "end": {
              "line": 295,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "descending",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 297,
              "column": 3
            },
            "end": {
              "line": 301,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 303,
              "column": 3
            },
            "end": {
              "line": 307,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "sort-on-column",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 309,
              "column": 3
            },
            "end": {
              "line": 312,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "group-on-descending",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 314,
              "column": 3
            },
            "end": {
              "line": 318,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "group-on",
          "description": "The column name to group on.",
          "sourceRange": {
            "start": {
              "line": 322,
              "column": 3
            },
            "end": {
              "line": 326,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "group-on-column",
          "description": "The column that matches the current `groupOn` value.",
          "sourceRange": {
            "start": {
              "line": 331,
              "column": 3
            },
            "end": {
              "line": 336,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "filtered-items",
          "description": "Items matching current set filter(s)",
          "sourceRange": {
            "start": {
              "line": 341,
              "column": 3
            },
            "end": {
              "line": 345,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "filtered-grouped-items",
          "description": "Grouped items structure after filtering.",
          "sourceRange": {
            "start": {
              "line": 350,
              "column": 3
            },
            "end": {
              "line": 352,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "sorted-filtered-grouped-items",
          "description": "Sorted items structure after filtering and grouping.",
          "sourceRange": {
            "start": {
              "line": 357,
              "column": 3
            },
            "end": {
              "line": 360,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "columns",
          "description": "List of columns definition for this table.",
          "sourceRange": {
            "start": {
              "line": 378,
              "column": 3
            },
            "end": {
              "line": 381,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "visible",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 383,
              "column": 3
            },
            "end": {
              "line": 389,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "visible-columns",
          "description": "List of <b>visible</b> columns.",
          "sourceRange": {
            "start": {
              "line": 394,
              "column": 3
            },
            "end": {
              "line": 398,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "disabled-columns",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 400,
              "column": 3
            },
            "end": {
              "line": 403,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "hash-param",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 3
            },
            "end": {
              "line": 412,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [
        {
          "type": "CustomEvent",
          "name": "selected-items-changed",
          "description": "Fired when the `selectedItems` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "highlighted-items-changed",
          "description": "Fired when the `highlightedItems` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "descending-changed",
          "description": "Fired when the `descending` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "sort-on-changed",
          "description": "Fired when the `sortOn` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "group-on-changed",
          "description": "Fired when the `groupOn` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "group-on-column-changed",
          "description": "Fired when the `groupOnColumn` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "sorted-filtered-grouped-items-changed",
          "description": "Fired when the `sortedFilteredGroupedItems` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "columns-changed",
          "description": "Fired when the `columns` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "visible-changed",
          "description": "Fired when the `visible` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "visible-columns-changed",
          "description": "Fired when the `visibleColumns` property changes.",
          "metadata": {}
        },
        {
          "type": "CustomEvent",
          "name": "disabled-columns-changed",
          "description": "Fired when the `disabledColumns` property changes.",
          "metadata": {}
        }
      ],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "tagname": "cosmoz-omnitable",
      "mixins": [
        "Polymer.IronResizableBehavior",
        "Cosmoz.Mixins.translatable"
      ]
    }
  ],
  "mixins": [
    {
      "description": "Prepares instances of templates and re-uses recycled instances.",
      "summary": "",
      "path": "cosmoz-omnitable-templatize-mixin.js",
      "properties": [],
      "methods": [
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          }
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          }
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          }
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          }
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          }
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          }
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          }
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 204,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Cosmoz.OmnitableTemplatizeMixin",
      "attributes": [],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-mixin.js",
      "properties": [
        {
          "name": "title",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_titleChanged\"",
              "attributeType": "String"
            }
          }
        },
        {
          "name": "valuePath",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "disabled",
          "type": "boolean | null | undefined",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_disabledChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "editable",
          "type": "boolean | null | undefined",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_editableChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "externalValues",
          "type": "boolean | null | undefined",
          "description": "Values to filter this column will be managed outside of omnitable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_externalValuesChanged\"",
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "filter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "headerFocused",
          "type": "boolean | null | undefined",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "notify": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "loading",
          "type": "boolean | null | undefined",
          "description": "Indicate that the column is loading/performing work",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "name",
          "type": "string | null | undefined",
          "description": "Column name for use with enabledColumns",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "All values for this column.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "sortOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "groupOn",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "isOmnitableColumn",
          "type": "boolean | null | undefined",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "Base width of this column.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\""
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "Base width of this column when in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"75px\""
        },
        {
          "name": "minWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\""
        },
        {
          "name": "editMinWidth",
          "type": "string | null | undefined",
          "description": "The minimum width of this column in edit mode.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"40px\""
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "Width growing factor for this column.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"1\""
        },
        {
          "name": "cellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-cell\""
        },
        {
          "name": "headerCellClass",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"default-header-cell\""
        },
        {
          "name": "styleModule",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          }
        },
        {
          "name": "overflow",
          "type": "boolean | null | undefined",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "false"
        },
        {
          "name": "priority",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "0"
        },
        {
          "name": "cellTitleFn",
          "type": "Function | null | undefined",
          "description": "Cell title function, can be overriden.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Function"
            }
          }
        },
        {
          "name": "hidden",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_hiddenChanged\"",
              "attributeType": "Boolean"
            }
          }
        },
        {
          "name": "columnIndex",
          "type": "number | null | undefined",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          }
        },
        {
          "name": "preferredDropdownHorizontalAlign",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "getTemplateInstance",
          "description": "Creates a new template instance of the required type.\n\nThe light and shadow DOM is searched for templates matching the selector\n`template.<type>`.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 27,
              "column": 1
            },
            "end": {
              "line": 42,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the template instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "recycleInstance",
          "description": "Marks an instance for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 50,
              "column": 1
            },
            "end": {
              "line": 60,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the detached instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "isRecycledInstance",
          "description": "Tests whether the instance is marked for re-use.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 67,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "true if instance is recycled"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "disconnectedCallback",
          "description": "Cleans up references to recycled instances when the element is detached.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 76,
              "column": 1
            },
            "end": {
              "line": 79,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_reuseInstance",
          "description": "Reuses an already created instance.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 88,
              "column": 1
            },
            "end": {
              "line": 102,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "an instance"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instances properties"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_createInstance",
          "description": "Creates a new instance of the required type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 111,
              "column": 1
            },
            "end": {
              "line": 117,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            },
            {
              "name": "props",
              "type": "Object",
              "description": "the instance's properies"
            }
          ],
          "return": {
            "type": "TemplateInstance",
            "desc": "the instance"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_getTemplateCtor",
          "description": "Searches for a template node of the required type and templatizes it.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 126,
              "column": 1
            },
            "end": {
              "line": 148,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "TemplateInstanceBase",
            "desc": "the templatized template"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardHostProp",
          "description": "Generates a function that forwards properties to instances of a certain type.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 172,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "type",
              "type": "String",
              "description": "the type of the template"
            }
          ],
          "return": {
            "type": "Function",
            "desc": "a function that forwards props to instances"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperty",
          "description": "Forward one property.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 182,
              "column": 1
            },
            "end": {
              "line": 188,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "name",
              "type": "string",
              "description": "Property name."
            },
            {
              "name": "value",
              "type": "any",
              "description": "Property value."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "false",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "_forwardProperties",
          "description": "Forward many properties.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-templatize-mixin.js",
            "start": {
              "line": 197,
              "column": 1
            },
            "end": {
              "line": 203,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance",
              "type": "object",
              "description": "Instance."
            },
            {
              "name": "props",
              "type": "object",
              "defaultValue": "{}",
              "description": "Properties to forward."
            },
            {
              "name": "flush",
              "type": "boolean",
              "defaultValue": "true",
              "description": "Whether to flush properties."
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.OmnitableTemplatizeMixin"
        },
        {
          "name": "ready",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 229,
              "column": 1
            },
            "end": {
              "line": 232,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_externalValuesChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 234,
              "column": 1
            },
            "end": {
              "line": 245,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "newExternalValuesValue"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_computePreferredDropdownHorizontalAlign",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 1
            },
            "end": {
              "line": 253,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "columnIndex"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 254,
              "column": 1
            },
            "end": {
              "line": 260,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 261,
              "column": 1
            },
            "end": {
              "line": 266,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "_pathsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 268,
              "column": 1
            },
            "end": {
              "line": 280,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "valuePath"
            },
            {
              "name": "groupOn"
            },
            {
              "name": "sortOn"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getComparableValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 282,
              "column": 1
            },
            "end": {
              "line": 284,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            }
          ]
        },
        {
          "name": "_valueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 286,
              "column": 1
            },
            "end": {
              "line": 294,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_fireItemChangeEvent",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 296,
              "column": 1
            },
            "end": {
              "line": 306,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath"
            },
            {
              "name": "oldValue"
            },
            {
              "name": "formatFn"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 308,
              "column": 1
            },
            "end": {
              "line": 319,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "resetFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 321,
              "column": 1
            },
            "end": {
              "line": 323,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hasFilter",
          "description": "Returns whether `filterNotify.base` or `filter` is set to a usable value.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 330,
              "column": 1
            },
            "end": {
              "line": 347,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterNotify",
              "type": "(Object | void)",
              "description": "filter.*"
            }
          ],
          "return": {
            "type": "Boolean",
            "desc": "True if filter or filterNotify.base is set"
          }
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 349,
              "column": 1
            },
            "end": {
              "line": 356,
              "column": 2
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 358,
              "column": 1
            },
            "end": {
              "line": 364,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filterString"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_applyMultiFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 366,
              "column": 1
            },
            "end": {
              "line": 371,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_titleChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 1
            },
            "end": {
              "line": 375,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_hiddenChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 377,
              "column": 1
            },
            "end": {
              "line": 379,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_disabledChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 380,
              "column": 1
            },
            "end": {
              "line": 382,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_editableChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 384,
              "column": 1
            },
            "end": {
              "line": 386,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "__filterChanged",
          "description": "",
          "privacy": "private",
          "sourceRange": {
            "start": {
              "line": 388,
              "column": 1
            },
            "end": {
              "line": 390,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 392,
              "column": 1
            },
            "end": {
              "line": 410,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj",
              "defaultValue": "this.filter"
            }
          ]
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 412,
              "column": 1
            },
            "end": {
              "line": 422,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 10,
          "column": 0
        },
        "end": {
          "line": 423,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Cosmoz.OmnitableColumnMixin",
      "attributes": [
        {
          "name": "title",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 13,
              "column": 3
            },
            "end": {
              "line": 16,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-path",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 18,
              "column": 3
            },
            "end": {
              "line": 20,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "disabled",
          "description": "If the column should be disabled until enabled with enabledColumns",
          "sourceRange": {
            "start": {
              "line": 25,
              "column": 3
            },
            "end": {
              "line": 29,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "editable",
          "description": "If true, the column will be editable by using an input element for rendering.",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 3
            },
            "end": {
              "line": 37,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "external-values",
          "description": "Values to filter this column will be managed outside of omnitable",
          "sourceRange": {
            "start": {
              "line": 42,
              "column": 3
            },
            "end": {
              "line": 46,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "filter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 48,
              "column": 3
            },
            "end": {
              "line": 54,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        },
        {
          "name": "header-focused",
          "description": "Indicates whether the user has engaged with the\nheader/filter component of the column",
          "sourceRange": {
            "start": {
              "line": 60,
              "column": 3
            },
            "end": {
              "line": 64,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "loading",
          "description": "Indicate that the column is loading/performing work",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 3
            },
            "end": {
              "line": 72,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "bind-values",
          "description": "Whether the column wants a list of all distinct values for the column in `values`",
          "sourceRange": {
            "start": {
              "line": 77,
              "column": 3
            },
            "end": {
              "line": 81,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "name",
          "description": "Column name for use with enabledColumns",
          "sourceRange": {
            "start": {
              "line": 86,
              "column": 3
            },
            "end": {
              "line": 88,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "values",
          "description": "All values for this column.",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 3
            },
            "end": {
              "line": 95,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "sort-on",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 97,
              "column": 3
            },
            "end": {
              "line": 100,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "group-on",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 3
            },
            "end": {
              "line": 105,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "is-omnitable-column",
          "description": "Used to indicate that an element using this behavior is a column definition that can be used\nin cosmoz-omnitable",
          "sourceRange": {
            "start": {
              "line": 111,
              "column": 3
            },
            "end": {
              "line": 115,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "width",
          "description": "Base width of this column.",
          "sourceRange": {
            "start": {
              "line": 120,
              "column": 3
            },
            "end": {
              "line": 123,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-width",
          "description": "Base width of this column when in edit mode.",
          "sourceRange": {
            "start": {
              "line": 128,
              "column": 3
            },
            "end": {
              "line": 131,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "min-width",
          "description": "The minimum width of this column.",
          "sourceRange": {
            "start": {
              "line": 136,
              "column": 3
            },
            "end": {
              "line": 139,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-min-width",
          "description": "The minimum width of this column in edit mode.",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 3
            },
            "end": {
              "line": 147,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flex",
          "description": "Width growing factor for this column.",
          "sourceRange": {
            "start": {
              "line": 152,
              "column": 3
            },
            "end": {
              "line": 155,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 157,
              "column": 3
            },
            "end": {
              "line": 160,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "header-cell-class",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 162,
              "column": 3
            },
            "end": {
              "line": 165,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "style-module",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 3
            },
            "end": {
              "line": 169,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "overflow",
          "description": "Allow column to overflow without triggering\ncolumn folding (good for long descriptions)",
          "sourceRange": {
            "start": {
              "line": 175,
              "column": 3
            },
            "end": {
              "line": 178,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "priority",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 180,
              "column": 3
            },
            "end": {
              "line": 183,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "cell-title-fn",
          "description": "Cell title function, can be overriden.",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 3
            },
            "end": {
              "line": 201,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Function | null | undefined"
        },
        {
          "name": "hidden",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 203,
              "column": 3
            },
            "end": {
              "line": 207,
              "column": 4
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "column-index",
          "description": "Index of this column in the list of displayed columns (excluding disabled/hidden columns).",
          "sourceRange": {
            "start": {
              "line": 211,
              "column": 3
            },
            "end": {
              "line": 213,
              "column": 4
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "preferred-dropdown-horizontal-align",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 215,
              "column": 3
            },
            "end": {
              "line": 218,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "Cosmoz.OmnitableTemplatizeMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-repeater-mixin.js",
      "properties": [
        {
          "name": "_elementType",
          "type": "String",
          "description": "The type of element to be repeated.\nMust be defined in implementors.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 1
            },
            "end": {
              "line": 126,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "_slotName",
          "type": "String",
          "description": "Slot name assigned to the repeated elements.\nMust be defined in implementors.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 133,
              "column": 1
            },
            "end": {
              "line": 135,
              "column": 2
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true
            }
          }
        },
        {
          "name": "columns",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "groupOnColumn",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "observer": "\"_groupOnColumnChanged\"",
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "trackColumns",
          "description": "Adds an observer to render the cells when the columns are changed.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 1
            },
            "end": {
              "line": 56,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "stopTrackingColumns",
          "description": "Stops reacting to column changes.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 62,
              "column": 1
            },
            "end": {
              "line": 69,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "renderCells",
          "description": "Renders all cells.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 75,
              "column": 1
            },
            "end": {
              "line": 77,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "destroyCells",
          "description": "Destroys all cells.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 1
            },
            "end": {
              "line": 85,
              "column": 2
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "forwardChange",
          "description": "Forwards a property change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 93,
              "column": 1
            },
            "end": {
              "line": 95,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "property",
              "type": "String",
              "description": "the property"
            },
            {
              "name": "value",
              "type": "any",
              "description": "the new value"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "forwardPathChange",
          "description": "Forwards a path change to all cells.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 102,
              "column": 1
            },
            "end": {
              "line": 106,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "changeRecord",
              "type": "Object",
              "description": "the change record"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "forEachElement",
          "description": "Runs a callback on each element.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 1
            },
            "end": {
              "line": 115,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "callback",
              "type": "OmnitableRepeaterMixin~forEachElementCallback",
              "description": "the callback"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_getTemplateInstance",
          "description": "Get a template instance for the specified column\nMust be defined in implementors.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 144,
              "column": 1
            },
            "end": {
              "line": 144,
              "column": 32
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column",
              "type": "OmnitableColumnMixin",
              "description": "The column."
            }
          ],
          "return": {
            "type": "Object",
            "desc": "The instance."
          }
        },
        {
          "name": "_configureElement",
          "description": "Configure a newly created repeated element",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 156,
              "column": 1
            },
            "end": {
              "line": 165,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "element",
              "type": "HTMLElement",
              "description": "the root cell element"
            },
            {
              "name": "column",
              "type": "OmnitableColumnMixin",
              "description": "the column"
            },
            {
              "name": "instance",
              "type": "TemplateInstance",
              "description": "the template instance"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_columnsChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 167,
              "column": 1
            },
            "end": {
              "line": 191,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "{\n  path,\n  base,\n  value\n}"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_renderSplices",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 193,
              "column": 1
            },
            "end": {
              "line": 202,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "splices"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_addElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 1
            },
            "end": {
              "line": 230,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "count"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_removeElements",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 1
            },
            "end": {
              "line": 240,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "start"
            },
            {
              "name": "removedColumns"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_groupOnColumnChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 242,
              "column": 1
            },
            "end": {
              "line": 258,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "column"
            },
            {
              "name": "previousColumn"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_forwardNotifyPath",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 260,
              "column": 1
            },
            "end": {
              "line": 265,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "instance"
            },
            {
              "name": "path"
            },
            {
              "name": "value"
            },
            {
              "name": "flush",
              "defaultValue": "false"
            }
          ],
          "return": {
            "type": "void"
          }
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 20,
          "column": 0
        },
        "end": {
          "line": 266,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Cosmoz.OmnitableRepeaterMixin",
      "attributes": [
        {
          "name": "columns",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 3
            },
            "end": {
              "line": 25,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "group-on-column",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 3
            },
            "end": {
              "line": 30,
              "column": 4
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-range-mixin.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          }
        },
        {
          "name": "min",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "max",
          "type": "number | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Number"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          }
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 113,
              "column": 2
            },
            "end": {
              "line": 115,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getComparableValue",
          "description": "Get the comparable value of an item.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 124,
              "column": 2
            },
            "end": {
              "line": 133,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "description": "Property path"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Valid value or void"
          }
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 141,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 143,
              "column": 2
            },
            "end": {
              "line": 153,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 154,
              "column": 2
            },
            "end": {
              "line": 156,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          }
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ]
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 230,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ]
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ]
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ]
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 262,
              "column": 2
            },
            "end": {
              "line": 268,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "hasFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 373,
              "column": 2
            },
            "end": {
              "line": 384,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter",
              "defaultValue": "this.filter"
            }
          ]
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 386,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ]
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 408,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 13,
          "column": 0
        },
        "end": {
          "line": 414,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Cosmoz.RangeColumnMixin",
      "attributes": [
        {
          "name": "bind-values",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined"
        },
        {
          "name": "values",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 34,
              "column": 4
            },
            "end": {
              "line": 37,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 39,
              "column": 4
            },
            "end": {
              "line": 42,
              "column": 5
            }
          },
          "metadata": {},
          "type": "number | null | undefined"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-date-mixin.js",
      "properties": [
        {
          "name": "bindValues",
          "type": "boolean | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Boolean"
            }
          },
          "defaultValue": "true",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "values",
          "type": "Array | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Array"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "min",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "max",
          "type": "Date | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Date"
            }
          },
          "defaultValue": "null"
        },
        {
          "name": "locale",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "null",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInput",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 49,
              "column": 4
            },
            "end": {
              "line": 54,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_range",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 56,
              "column": 4
            },
            "end": {
              "line": 59,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limit",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 61,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_tooltip",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 69,
              "column": 4
            },
            "end": {
              "line": 72,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterText",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 45,
              "column": 4
            },
            "end": {
              "line": 48,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "String"
            }
          }
        },
        {
          "name": "width",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"100px\""
        },
        {
          "name": "editWidth",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"150px\""
        },
        {
          "name": "flex",
          "type": "string | null | undefined",
          "description": "No need to grow, as the values in a date column should have known fixed width",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"0\""
        },
        {
          "name": "formatter",
          "type": "Object | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {
            "polymer": {
              "readOnly": true,
              "attributeType": "Object"
            }
          }
        }
      ],
      "methods": [
        {
          "name": "disconnectedCallback",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 85,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toNumber",
          "description": "Converts a value to number optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 95,
              "column": 2
            },
            "end": {
              "line": 111,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Number | *)",
              "description": "The value to convert to number"
            },
            {
              "name": "limit",
              "type": "(Number | *)",
              "description": "The value used to limit the number"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "The function used to limit the number (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Value converted to Number or void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 118,
              "column": 2
            },
            "end": {
              "line": 120,
              "column": 3
            }
          },
          "metadata": {},
          "params": []
        },
        {
          "name": "getComparableValue",
          "description": "Get comparable number from date",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 129,
              "column": 2
            },
            "end": {
              "line": 135,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "description": "Property path"
            }
          ],
          "return": {
            "type": "(Number | void)",
            "desc": "Valid value or void"
          }
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 135,
              "column": 2
            },
            "end": {
              "line": 141,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getString",
          "description": "Get date of item as string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 145,
              "column": 2
            },
            "end": {
              "line": 154,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item",
              "type": "Object",
              "description": "Item to be processed"
            },
            {
              "name": "valuePath",
              "type": "String",
              "defaultValue": "this.valuePath",
              "description": "= this.valuePath Property path"
            },
            {
              "name": "formatter",
              "type": "Object",
              "defaultValue": "this.formatter",
              "description": "= this.formatter Property formatter"
            }
          ],
          "return": {
            "type": "String",
            "desc": "Date rendered as string or 'Invalid Date'"
          }
        },
        {
          "name": "renderValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 181,
              "column": 2
            },
            "end": {
              "line": 190,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "formatter",
              "defaultValue": "this.formatter"
            }
          ]
        },
        {
          "name": "getInputString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 158,
              "column": 2
            },
            "end": {
              "line": 161,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeRange",
          "description": "Computes min/max range from values.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 169,
              "column": 2
            },
            "end": {
              "line": 186,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "`values` property changes"
            }
          ],
          "return": {
            "type": "Object",
            "desc": "Computed min/max"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeLimit",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 188,
              "column": 2
            },
            "end": {
              "line": 204,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "range"
            },
            {
              "name": "inputChange"
            },
            {
              "name": "min"
            },
            {
              "name": "max"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "getFilterFn",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 206,
              "column": 2
            },
            "end": {
              "line": 214,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_applySingleFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 216,
              "column": 2
            },
            "end": {
              "line": 230,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter"
            },
            {
              "name": "item"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeFilterText",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 232,
              "column": 2
            },
            "end": {
              "line": 249,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_computeTooltip",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 251,
              "column": 2
            },
            "end": {
              "line": 256,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "title"
            },
            {
              "name": "text"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 258,
              "column": 2
            },
            "end": {
              "line": 260,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_toInputString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 196,
              "column": 2
            },
            "end": {
              "line": 202,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ]
        },
        {
          "name": "_getDefaultFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 270,
              "column": 2
            },
            "end": {
              "line": 275,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterInputChanged",
          "description": "Observes changes of _filterInput, saves the path, debounces _limitInput.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 283,
              "column": 2
            },
            "end": {
              "line": 293,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change",
              "type": "Object",
              "description": "'_filterInput' property changes"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_limitInput",
          "description": "Debounced function called by `_filterInputChanged` when `_filterInput` changes.",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 299,
              "column": 2
            },
            "end": {
              "line": 325,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_updateFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 327,
              "column": 2
            },
            "end": {
              "line": 340,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_filterChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 342,
              "column": 2
            },
            "end": {
              "line": 362,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "change"
            }
          ],
          "return": {
            "type": "void"
          },
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "hasFilter",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 364,
              "column": 2
            },
            "end": {
              "line": 371,
              "column": 3
            }
          },
          "metadata": {},
          "params": [],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_serializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 373,
              "column": 2
            },
            "end": {
              "line": 384,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "filter",
              "defaultValue": "this.filter"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_deserializeFilter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 386,
              "column": 2
            },
            "end": {
              "line": 400,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "obj"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_toHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 402,
              "column": 2
            },
            "end": {
              "line": 408,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "_fromHashString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 410,
              "column": 2
            },
            "end": {
              "line": 412,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value"
            },
            {
              "name": "property"
            }
          ],
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "toDate",
          "description": "Converts an value to date optionaly limiting it.",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 83,
              "column": 2
            },
            "end": {
              "line": 116,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "value",
              "type": "(Date | String)",
              "description": "Value to convert to date"
            },
            {
              "name": "limit",
              "type": "(Date | String)",
              "description": "Value used to limit the date"
            },
            {
              "name": "limitFunc",
              "type": "Function",
              "description": "Function used to limit the date (Math.min|Math.max)"
            }
          ],
          "return": {
            "type": "(Date | void)",
            "desc": "Value converted to date optionaly limitated"
          }
        },
        {
          "name": "getAbsoluteISOString",
          "description": "Computes the local timezone and adds it to a local ISO string",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 161,
              "column": 2
            },
            "end": {
              "line": 169,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string, without timezone info"
            }
          ],
          "return": {
            "type": "String",
            "desc": "an ISO date string, with timezone info"
          }
        },
        {
          "name": "_getTimezoneString",
          "description": "Calculates the local timezone offset and formats it to ISO Timezone string.",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 176,
              "column": 2
            },
            "end": {
              "line": 179,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "localISOString",
              "type": "String",
              "description": "an ISO date string"
            }
          ],
          "return": {
            "type": "String",
            "desc": "the ISO timezone"
          }
        },
        {
          "name": "_computeFormatter",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 192,
              "column": 2
            },
            "end": {
              "line": 194,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "locale"
            }
          ]
        },
        {
          "name": "_dateValueChanged",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 204,
              "column": 2
            },
            "end": {
              "line": 215,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "event"
            }
          ],
          "return": {
            "type": "void"
          }
        },
        {
          "name": "_toLocalISOString",
          "description": "",
          "privacy": "protected",
          "sourceRange": {
            "start": {
              "line": 217,
              "column": 2
            },
            "end": {
              "line": 219,
              "column": 3
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "date"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 27,
          "column": 0
        },
        "end": {
          "line": 221,
          "column": 1
        }
      },
      "privacy": "public",
      "name": "Cosmoz.DateColumnMixin",
      "attributes": [
        {
          "name": "bind-values",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 21,
              "column": 4
            },
            "end": {
              "line": 25,
              "column": 5
            }
          },
          "metadata": {},
          "type": "boolean | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "values",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 27,
              "column": 4
            },
            "end": {
              "line": 32,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Array | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "min",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 40,
              "column": 4
            },
            "end": {
              "line": 43,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined"
        },
        {
          "name": "max",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 35,
              "column": 4
            },
            "end": {
              "line": 38,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Date | null | undefined"
        },
        {
          "name": "locale",
          "description": "",
          "sourceRange": {
            "file": "cosmoz-omnitable-column-range-mixin.js",
            "start": {
              "line": 44,
              "column": 4
            },
            "end": {
              "line": 47,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined",
          "inheritedFrom": "Cosmoz.RangeColumnMixin"
        },
        {
          "name": "width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 50,
              "column": 4
            },
            "end": {
              "line": 53,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "edit-width",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 55,
              "column": 4
            },
            "end": {
              "line": 58,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "flex",
          "description": "No need to grow, as the values in a date column should have known fixed width",
          "sourceRange": {
            "start": {
              "line": 64,
              "column": 4
            },
            "end": {
              "line": 67,
              "column": 5
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "formatter",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 68,
              "column": 4
            },
            "end": {
              "line": 71,
              "column": 5
            }
          },
          "metadata": {},
          "type": "Object | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": [],
      "mixins": [
        "Cosmoz.RangeColumnMixin"
      ]
    },
    {
      "description": "",
      "summary": "",
      "path": "cosmoz-omnitable-column-list-mixin.js",
      "properties": [
        {
          "name": "textProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 3
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"label\""
        },
        {
          "name": "valueProperty",
          "type": "string | null | undefined",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 3
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "metadata": {
            "polymer": {
              "attributeType": "String"
            }
          },
          "defaultValue": "\"value\""
        }
      ],
      "methods": [
        {
          "name": "getString",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 23,
              "column": 1
            },
            "end": {
              "line": 35,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        },
        {
          "name": "toXlsxValue",
          "description": "",
          "privacy": "public",
          "sourceRange": {
            "start": {
              "line": 37,
              "column": 1
            },
            "end": {
              "line": 39,
              "column": 2
            }
          },
          "metadata": {},
          "params": [
            {
              "name": "item"
            },
            {
              "name": "valuePath",
              "defaultValue": "this.valuePath"
            }
          ]
        }
      ],
      "staticMethods": [],
      "demos": [],
      "metadata": {},
      "sourceRange": {
        "start": {
          "line": 8,
          "column": 0
        },
        "end": {
          "line": 41,
          "column": 2
        }
      },
      "privacy": "public",
      "name": "Cosmoz.ListColumnMixin",
      "attributes": [
        {
          "name": "text-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 11,
              "column": 3
            },
            "end": {
              "line": 14,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        },
        {
          "name": "value-property",
          "description": "",
          "sourceRange": {
            "start": {
              "line": 16,
              "column": 3
            },
            "end": {
              "line": 19,
              "column": 4
            }
          },
          "metadata": {},
          "type": "string | null | undefined"
        }
      ],
      "events": [],
      "styling": {
        "cssVariables": [],
        "selectors": []
      },
      "slots": []
    }
  ]
}
